/*
 * ManeuverPanel.java
 * =====================================================================
 * Copyright (C) 2009 Shawn E. Gano
 * 
 * This file is part of JSatTrak.
 * 
 * JSatTrak is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * JSatTrak is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with JSatTrak.  If not, see <http://www.gnu.org/licenses/>.
 * =====================================================================
 *
 * Created on January 14, 2008, 1:16 PM
 */

package jsattrak.customsat.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Enumeration;

import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;

import jsattrak.customsat.ManeuverNode;

/**
 * 
 * @author sgano
 */
public class ManeuverPanel extends javax.swing.JPanel {

	ManeuverNode mNode;

	// used for diaplying settings panel
	private JInternalFrame iframe; // used to know what its parent frame is - to
									// close window

	/** Creates new form ManeuverPanel */
	public ManeuverPanel(ManeuverNode mNode, JInternalFrame iframe) {
		this.iframe = iframe;
		this.mNode = mNode;

		initComponents();

		// load last values
		double[] vnc = mNode.getVncThrustVector();
		xTextField.setText(vnc[0] + "");
		yTextField.setText(vnc[1] + "");
		zTextField.setText(vnc[2] + "");

		eventTextField1.setText(mNode.getEventsParams()[0] + "");
		eventTextField2.setText(mNode.getEventsParams()[1] + "");
		eventTextField3.setText(mNode.getEventsParams()[2] + "");

		eventsComboBox.setSelectedItem(mNode.getEvent().value);

		// Load the bodyComboBox

		// If an object was saved
		if (mNode.getTargetBodyObjectName() != null) {
			// Satellite object
			if (mNode.getTypeOfTarget() == ManeuverNode.SATELLITEOBJECT) {
				satObjectRadioButtonActionPerformed(null);
			}
			// Ground station object
			else if (mNode.getTypeOfTarget() == ManeuverNode.GROUNDSTATIONOBJECT) {
				groundStationBodyRadioButtonActionPerformed(null);
			}
			// Celestial body object
			else {
				celestialBodyRadioButtonActionPerformed(null);
			}
			bodyComboBox.setSelectedItem(mNode.getTargetBodyObjectName());
		}

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jLabel1 = new javax.swing.JLabel();
		okButton = new javax.swing.JButton();
		addButton = new javax.swing.JButton();
		cancelButton = new javax.swing.JButton();
		applyButton = new javax.swing.JButton();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		jLabel5 = new javax.swing.JLabel();
		yTextField = new javax.swing.JTextField();
		xTextField = new javax.swing.JTextField();
		zTextField = new javax.swing.JTextField();

		eventsComboBox = new javax.swing.JComboBox();
		jLabelEvents = new javax.swing.JLabel();
		jPanelEvent = new javax.swing.JPanel();
		jLabelEvent1 = new javax.swing.JLabel();
		jLabelEvent2 = new javax.swing.JLabel();
		jLabelEvent3 = new javax.swing.JLabel();
		eventTextField1 = new javax.swing.JTextField();
		eventTextField2 = new javax.swing.JTextField();
		eventTextField3 = new javax.swing.JTextField();
		totalEclipseEventRadioButton = new javax.swing.JRadioButton();
		penumbraEclipseEventRadioButton = new javax.swing.JRadioButton();
		satBodyEventRadioButton = new javax.swing.JRadioButton();
		groundStationBodyEventRadioButton = new javax.swing.JRadioButton();
		CelestialBodyEventRadioButton = new javax.swing.JRadioButton();

		bodyComboBox = new javax.swing.JComboBox();
		bodyLabel = new javax.swing.JLabel();

		jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12));
		jLabel1.setText("Impulse Maneuver Thrust Vector [m/s]");

		okButton.setText("Ok");
		okButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				okButtonActionPerformed(evt);
			}
		});

		cancelButton.setText("Cancel");
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancelButtonActionPerformed(evt);
			}
		});

		applyButton.setText("Apply");
		applyButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				applyButtonActionPerformed(evt);
			}
		});

		addButton.setText("Add");
		addButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addButtonActionPerformed(evt);
			}
		});

		jLabel2.setText("X (Along Velocity):");

		jLabel3.setText("Y (Normal, out of plane):");

		jLabel4.setText("Z (Co-normal): ");

		jLabel5.setText("VNC Frame (Velocity/Normal/Co-normal):");

		yTextField.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				yTextFieldActionPerformed(evt);
			}
		});

		totalEclipseEventRadioButton.setSelected(true);
		totalEclipseEventRadioButton.setText("Total eclipse detection"); // NOI18N
		totalEclipseEventRadioButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						totalEclipseRadioButtonActionPerformed(evt);
					}
				});

		penumbraEclipseEventRadioButton.setText("Penumbra detection"); // NOI18N
		penumbraEclipseEventRadioButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						penumbraEclipseRadioButtonActionPerformed(evt);
					}
				});

		satBodyEventRadioButton.setSelected(true);
		satBodyEventRadioButton.setText("Satellite"); // NOI18N
		satBodyEventRadioButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						satObjectRadioButtonActionPerformed(evt);
					}
				});

		groundStationBodyEventRadioButton.setText("Ground station"); // NOI18N
		groundStationBodyEventRadioButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						groundStationBodyRadioButtonActionPerformed(evt);
					}
				});

		CelestialBodyEventRadioButton.setText("Celestial object"); // NOI18N
		CelestialBodyEventRadioButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						celestialBodyRadioButtonActionPerformed(evt);
					}
				});

		jLabelEvents.setText("Type of event:");

		jLabelEvent1.setText("Align angle");

		bodyLabel.setText("Body to align");

		jLabelEvent2.setVisible(false);

		eventTextField2.setVisible(false);

		jLabelEvent3.setVisible(false);

		eventTextField3.setVisible(false);

		totalEclipseEventRadioButton.setVisible(false);
		penumbraEclipseEventRadioButton.setVisible(false);

		// Construction de la liste des satellites et stations sols definies par
		// l'utilisateur
		ArrayList<String> satList = new ArrayList<String>();

		for (Enumeration<String> e = mNode.getUserSatList().keys(); e
				.hasMoreElements();) {
			String sat = e.nextElement();
			// non prise en compte du sat courant
			if (!sat.equals(mNode.getCurrentSat().getName()))
				satList.add(sat);

		}

		bodyComboBox.setModel(new javax.swing.DefaultComboBoxModel(satList
				.toArray()));

		bodyComboBox.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {

				bodyActionPerformed();

			}
		});

		eventsComboBox.setModel(new javax.swing.DefaultComboBoxModel(Events
				.getValues()));

		eventsComboBox.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {

				eventActionPerformed();

			}
		});

		javax.swing.GroupLayout jPanelEventLayout = new javax.swing.GroupLayout(
				jPanelEvent);
		jPanelEvent.setLayout(jPanelEventLayout);
		jPanelEventLayout
				.setHorizontalGroup(jPanelEventLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanelEventLayout
										.createSequentialGroup()
										.addGroup(
												jPanelEventLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																jLabelEvent1)
														.addComponent(
																jLabelEvent2)
														.addComponent(
																jLabelEvent3)
														.addComponent(bodyLabel)

										)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)

										.addGroup(

												jPanelEventLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)

														.addComponent(
																eventTextField1,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																121,
																Short.MAX_VALUE)
														.addComponent(
																eventTextField2,
																javax.swing.GroupLayout.Alignment.TRAILING,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																121,
																Short.MAX_VALUE)
														.addComponent(
																eventTextField3,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																121,
																Short.MAX_VALUE)
														.addComponent(
																bodyComboBox,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																121,
																Short.MAX_VALUE)
														.addGroup(
																jPanelEventLayout
																		.createSequentialGroup()

																		.addComponent(
																				satBodyEventRadioButton)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				groundStationBodyEventRadioButton)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				CelestialBodyEventRadioButton))

														.addGroup(
																jPanelEventLayout
																		.createSequentialGroup()

																		.addComponent(
																				totalEclipseEventRadioButton)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				penumbraEclipseEventRadioButton)))

						).addGap(146, 146, 146));
		jPanelEventLayout
				.setVerticalGroup(jPanelEventLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanelEventLayout
										.createSequentialGroup()
										.addGroup(
												jPanelEventLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																jLabelEvent1)
														.addComponent(
																eventTextField1,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanelEventLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																jLabelEvent2)
														.addComponent(
																eventTextField2,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanelEventLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																jLabelEvent3)
														.addComponent(
																eventTextField3,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanelEventLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(bodyLabel)
														.addComponent(
																satBodyEventRadioButton)
														.addComponent(
																groundStationBodyEventRadioButton)
														.addComponent(
																CelestialBodyEventRadioButton))
										.addComponent(
												bodyComboBox,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)

										.addGroup(
												jPanelEventLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)

														.addComponent(
																totalEclipseEventRadioButton)
														.addComponent(
																penumbraEclipseEventRadioButton))));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup()
								.addContainerGap(110, Short.MAX_VALUE)
								.addComponent(okButton)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(cancelButton)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(applyButton))
				.addGroup(
						layout.createSequentialGroup().addContainerGap()
								.addComponent(jLabel1)
								.addContainerGap(47, Short.MAX_VALUE))
				.addGroup(
						layout.createSequentialGroup().addContainerGap()
								.addComponent(jLabel5)
								.addContainerGap(90, Short.MAX_VALUE))
				.addGroup(
						layout.createSequentialGroup().addContainerGap()
								.addComponent(jPanelEvent)
								.addContainerGap(90, Short.MAX_VALUE))
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(jLabelEvents))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(
														eventsComboBox,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(addButton).addGap(0, 0, 0))
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(jLabel3)
												.addComponent(jLabel2)
												.addComponent(jLabel4))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(
														zTextField,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														121, Short.MAX_VALUE)
												.addComponent(
														xTextField,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														121, Short.MAX_VALUE)
												.addComponent(
														yTextField,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														121, Short.MAX_VALUE))
								.addGap(0, 0, 0)));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(jLabel1)
								.addGap(1, 1, 1)
								.addComponent(jLabel5)
								.addGap(18, 18, 18)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabel2)
												.addComponent(
														xTextField,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabel3)
												.addComponent(
														yTextField,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabel4)
												.addComponent(
														zTextField,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED,
										26, Short.MAX_VALUE)

								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabelEvents)
												.addComponent(
														eventsComboBox,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(
														addButton,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED,
										26, Short.MAX_VALUE)

								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jPanelEvent))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED,
										26, Short.MAX_VALUE)

								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(applyButton)
												.addComponent(cancelButton)
												.addComponent(okButton))));
	}// </editor-fold>//GEN-END:initComponents

	private void okButtonActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_okButtonActionPerformed
	{// GEN-HEADEREND:event_okButtonActionPerformed
		boolean success = saveSettings();

		// close internal frame
		if (success) {
			try {
				iframe.dispose(); // could setClosed(true)
			} catch (Exception e) {
			}
		}
	}// GEN-LAST:event_okButtonActionPerformed

	private void addButtonActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_okButtonActionPerformed
	{// GEN-HEADEREND:event_okButtonActionPerformed
		boolean success = saveSettings();

		// close internal frame
		if (success) {
			try {
				iframe.dispose(); // could setClosed(true)
			} catch (Exception e) {
			}
		}
	}// GEN-LAST:event_okButtonActionPerformed

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_cancelButtonActionPerformed
	{// GEN-HEADEREND:event_cancelButtonActionPerformed
		// close internal frame
		try {
			iframe.dispose(); // could setClosed(true)
		} catch (Exception e) {
		}
	}// GEN-LAST:event_cancelButtonActionPerformed

	private void applyButtonActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_applyButtonActionPerformed
	{// GEN-HEADEREND:event_applyButtonActionPerformed
		saveSettings();
	}// GEN-LAST:event_applyButtonActionPerformed

	private void yTextFieldActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_yTextFieldActionPerformed
	{// GEN-HEADEREND:event_yTextFieldActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_yTextFieldActionPerformed

	private void totalEclipseRadioButtonActionPerformed(
			java.awt.event.ActionEvent evt)// GEN-FIRST:event_eciRadioButtonActionPerformed
	{// GEN-HEADEREND:event_eciRadioButtonActionPerformed
		totalEclipseEventRadioButton.setSelected(true);
		penumbraEclipseEventRadioButton.setSelected(false);
	}// GEN-LAST:event_eciRadioButtonActionPerformed

	private void penumbraEclipseRadioButtonActionPerformed(
			java.awt.event.ActionEvent evt)// GEN-FIRST:event_ecefRadioButtonActionPerformed
	{// GEN-HEADEREND:event_ecefRadioButtonActionPerformed
		totalEclipseEventRadioButton.setSelected(false);
		penumbraEclipseEventRadioButton.setSelected(true);
	}// GEN-LAST:event_ecefRadioButtonActionPerformed

	private void satObjectRadioButtonActionPerformed(
			java.awt.event.ActionEvent evt)// GEN-FIRST:event_ecefRadioButtonActionPerformed
	{// GEN-HEADEREND:event_ecefRadioButtonActionPerformed

		// Construction de la liste des satellites definis par l'utilisateur
		ArrayList<String> satList = new ArrayList<String>();
		for (Enumeration<String> e = mNode.getUserSatList().keys(); e
				.hasMoreElements();) {
			String sat = e.nextElement();
			// non prise en compte du sat courant
			if (!sat.equals(mNode.getCurrentSat().getName()))
				satList.add(sat);
		}
		bodyComboBox.setModel(new javax.swing.DefaultComboBoxModel(satList
				.toArray()));

		satBodyEventRadioButton.setSelected(true);
		groundStationBodyEventRadioButton.setSelected(false);
		CelestialBodyEventRadioButton.setSelected(false);
	}// GEN-LAST:event_ecefRadioButtonActionPerformed

	private void groundStationBodyRadioButtonActionPerformed(
			java.awt.event.ActionEvent evt)// GEN-FIRST:event_ecefRadioButtonActionPerformed
	{// GEN-HEADEREND:event_ecefRadioButtonActionPerformed

		// Construction de la liste des stations sols definis par l'utilisateur
		ArrayList<String> groundstationList = new ArrayList<String>();
		for (Enumeration<String> e = mNode.getUserGroundStationsList().keys(); e
				.hasMoreElements();) {
			groundstationList.add(e.nextElement());
		}
		bodyComboBox.setModel(new javax.swing.DefaultComboBoxModel(
				groundstationList.toArray()));

		satBodyEventRadioButton.setSelected(false);
		groundStationBodyEventRadioButton.setSelected(true);
		CelestialBodyEventRadioButton.setSelected(false);
	}// GEN-LAST:event_ecefRadioButtonActionPerformed

	private void celestialBodyRadioButtonActionPerformed(
			java.awt.event.ActionEvent evt)// GEN-FIRST:event_ecefRadioButtonActionPerformed
	{// GEN-HEADEREND:event_ecefRadioButtonActionPerformed

		// Recupere la liste des objets celestes
		bodyComboBox.setModel(new javax.swing.DefaultComboBoxModel(
				CelestialBodyObject.getValues()));

		satBodyEventRadioButton.setSelected(false);
		groundStationBodyEventRadioButton.setSelected(false);
		CelestialBodyEventRadioButton.setSelected(true);
	}// GEN-LAST:event_ecefRadioButtonActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton applyButton;
	private javax.swing.JButton cancelButton;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JButton okButton;
	private javax.swing.JTextField xTextField;
	private javax.swing.JTextField yTextField;
	private javax.swing.JTextField zTextField;

	private javax.swing.JLabel jLabelEvents;
	private javax.swing.JComboBox eventsComboBox;
	private javax.swing.JButton addButton;
	private javax.swing.JPanel jPanelEvent;
	private javax.swing.JLabel jLabelEvent1;
	private javax.swing.JLabel jLabelEvent2;
	private javax.swing.JLabel jLabelEvent3;
	private javax.swing.JTextField eventTextField1;
	private javax.swing.JTextField eventTextField2;
	private javax.swing.JTextField eventTextField3;
	private javax.swing.JRadioButton totalEclipseEventRadioButton;
	private javax.swing.JRadioButton penumbraEclipseEventRadioButton;
	private javax.swing.JComboBox bodyComboBox;
	private javax.swing.JLabel bodyLabel;
	private javax.swing.JRadioButton satBodyEventRadioButton;
	private javax.swing.JRadioButton groundStationBodyEventRadioButton;
	private javax.swing.JRadioButton CelestialBodyEventRadioButton;

	// End of variables declaration//GEN-END:variables

	private void eventActionPerformed() {

		eventTextField1.setText(0 + "");
		eventTextField2.setText(0 + "");
		eventTextField3.setText(0 + "");

		switch (Events.getEnum(eventsComboBox.getSelectedItem().toString())) {

		// Alignment detector
		case ALIGNMENT:

			jLabelEvent1.setText("Align angle");

			jLabelEvent1.setVisible(true);

			eventTextField1.setVisible(true);

			jLabelEvent2.setVisible(false);

			eventTextField2.setVisible(false);

			jLabelEvent3.setVisible(false);

			eventTextField3.setVisible(false);

			// Construction de la liste des satellites et stations sols definies
			// par l'utilisateur
			ArrayList<String> satAndGroundstationList = new ArrayList<String>();

			for (Enumeration<String> e = mNode.getUserSatList().keys(); e
					.hasMoreElements();) {
				String sat = e.nextElement();
				// non prise en compte du sat courant
				if (!sat.equals(mNode.getCurrentSat().getName()))
					satAndGroundstationList.add(sat);

			}

			for (Enumeration<String> e = mNode.getUserGroundStationsList()
					.keys(); e.hasMoreElements();) {
				satAndGroundstationList.add(e.nextElement());

			}

			bodyComboBox.setModel(new javax.swing.DefaultComboBoxModel(
					satAndGroundstationList.toArray()));

			bodyComboBox.setVisible(true);

			bodyLabel.setVisible(true);

			totalEclipseEventRadioButton.setVisible(false);
			penumbraEclipseEventRadioButton.setVisible(false);

			satBodyEventRadioButton.setVisible(true);
			groundStationBodyEventRadioButton.setVisible(true);
			CelestialBodyEventRadioButton.setVisible(true);

			break;

		// Altitude detector
		case ALTITUDE:
			jLabelEvent1.setText("Altitude Value");

			jLabelEvent1.setVisible(true);

			eventTextField1.setVisible(true);

			jLabelEvent2.setVisible(false);

			eventTextField2.setVisible(false);

			jLabelEvent3.setVisible(false);

			eventTextField3.setVisible(false);

			bodyComboBox.setVisible(false);

			bodyLabel.setVisible(false);

			totalEclipseEventRadioButton.setVisible(false);
			penumbraEclipseEventRadioButton.setVisible(false);

			satBodyEventRadioButton.setVisible(false);
			groundStationBodyEventRadioButton.setVisible(false);
			CelestialBodyEventRadioButton.setVisible(false);

			break;

		// Apparent Elevation detector
		case APPARENTELEVATION:
			jLabelEvent1.setText("Elevation Value");

			jLabelEvent1.setVisible(true);

			eventTextField1.setVisible(true);

			jLabelEvent2.setVisible(false);

			eventTextField2.setVisible(false);

			jLabelEvent3.setVisible(false);

			eventTextField3.setVisible(false);

			bodyComboBox.setVisible(false);

			bodyLabel.setVisible(false);

			totalEclipseEventRadioButton.setVisible(false);
			penumbraEclipseEventRadioButton.setVisible(false);

			satBodyEventRadioButton.setVisible(false);
			groundStationBodyEventRadioButton.setVisible(false);
			CelestialBodyEventRadioButton.setVisible(false);

			break;

		// Apside detector
		case APSIDE:
			jLabelEvent1.setText("Body to align");

			jLabelEvent2.setText("Align angle");

			jLabelEvent3.setText("Altitude value");

			jLabelEvent1.setVisible(false);

			eventTextField1.setVisible(false);

			jLabelEvent2.setVisible(false);

			eventTextField2.setVisible(false);

			jLabelEvent3.setVisible(false);

			eventTextField3.setVisible(false);

			bodyComboBox.setVisible(false);
			bodyLabel.setVisible(false);

			totalEclipseEventRadioButton.setVisible(false);
			penumbraEclipseEventRadioButton.setVisible(false);

			satBodyEventRadioButton.setVisible(false);
			groundStationBodyEventRadioButton.setVisible(false);
			CelestialBodyEventRadioButton.setVisible(false);

			break;

		// Circular field of view detector
		case CIRCULARFIELDOFVIEW:
			jLabelEvent1.setText("Max Interval");

			jLabelEvent2.setText("Center Direction");

			jLabelEvent3.setText("Half Aperture");

			jLabelEvent1.setVisible(true);

			eventTextField1.setVisible(true);

			jLabelEvent2.setVisible(true);

			eventTextField2.setVisible(true);

			jLabelEvent3.setVisible(true);

			eventTextField3.setVisible(true);

			bodyComboBox.setVisible(false);
			bodyLabel.setVisible(false);

			totalEclipseEventRadioButton.setVisible(false);
			penumbraEclipseEventRadioButton.setVisible(false);

			satBodyEventRadioButton.setVisible(false);
			groundStationBodyEventRadioButton.setVisible(false);
			CelestialBodyEventRadioButton.setVisible(false);

			break;

		// Date Detector
		case DATE:
			jLabelEvent1.setText("Max check");

			jLabelEvent2.setText("Date");

			jLabelEvent3.setText("Convergence");

			jLabelEvent1.setVisible(true);

			eventTextField1.setVisible(true);

			jLabelEvent2.setVisible(true);

			eventTextField2.setVisible(true);

			jLabelEvent3.setVisible(true);

			eventTextField3.setVisible(true);

			bodyComboBox.setVisible(false);
			bodyLabel.setVisible(false);

			totalEclipseEventRadioButton.setVisible(false);
			penumbraEclipseEventRadioButton.setVisible(false);

			satBodyEventRadioButton.setVisible(false);
			groundStationBodyEventRadioButton.setVisible(false);
			CelestialBodyEventRadioButton.setVisible(false);

			break;

		// Dihedral field of view detector
		case DIHEDRALFIELDOFVIEW:
			jLabelEvent1.setText("Max interval(sec)");

			jLabelEvent2.setText("Target");

			jLabelEvent3.setText("Center direction...");

			jLabelEvent1.setVisible(true);

			eventTextField1.setVisible(true);

			jLabelEvent2.setVisible(true);

			eventTextField2.setVisible(true);

			jLabelEvent3.setVisible(true);

			eventTextField3.setVisible(true);

			bodyComboBox.setVisible(false);
			bodyLabel.setVisible(false);

			totalEclipseEventRadioButton.setVisible(false);
			penumbraEclipseEventRadioButton.setVisible(false);

			satBodyEventRadioButton.setVisible(false);
			groundStationBodyEventRadioButton.setVisible(false);
			CelestialBodyEventRadioButton.setVisible(false);

			break;

		// Eclipse detector
		case ECLIPSE:
			jLabelEvent1.setText("Radius of body occulted (rad)");

			jLabelEvent2.setText("Occulting body (sun)");

			jLabelEvent3.setText("Radius of body occulting...");

			jLabelEvent1.setVisible(true);

			eventTextField1.setVisible(true);

			jLabelEvent2.setVisible(true);

			eventTextField2.setVisible(true);

			jLabelEvent3.setVisible(true);

			eventTextField3.setVisible(true);

			bodyComboBox.setVisible(false);
			bodyLabel.setVisible(false);

			totalEclipseEventRadioButton.setVisible(true);
			penumbraEclipseEventRadioButton.setVisible(true);

			satBodyEventRadioButton.setVisible(false);
			groundStationBodyEventRadioButton.setVisible(false);
			CelestialBodyEventRadioButton.setVisible(false);

			break;

		// Elevation detector
		case ELEVATION:
			jLabelEvent1.setText("Elevation (rad)");

			jLabelEvent2.setText("Topocentric frame");

			jLabelEvent1.setVisible(true);

			eventTextField1.setVisible(true);

			jLabelEvent2.setVisible(false);

			eventTextField2.setVisible(false);

			jLabelEvent3.setVisible(false);

			eventTextField3.setVisible(false);

			bodyComboBox.setVisible(false);
			bodyLabel.setVisible(false);

			totalEclipseEventRadioButton.setVisible(false);
			penumbraEclipseEventRadioButton.setVisible(false);

			satBodyEventRadioButton.setVisible(false);
			groundStationBodyEventRadioButton.setVisible(false);
			CelestialBodyEventRadioButton.setVisible(false);

			break;

		// Ground mask elevation detector
		case GROUNDMASKELEVATION:

			jLabelEvent1.setVisible(false);

			eventTextField1.setVisible(false);

			jLabelEvent2.setVisible(false);

			eventTextField2.setVisible(false);

			jLabelEvent3.setVisible(false);

			eventTextField3.setVisible(false);

			bodyComboBox.setVisible(false);
			bodyLabel.setVisible(false);

			totalEclipseEventRadioButton.setVisible(false);
			penumbraEclipseEventRadioButton.setVisible(false);

			satBodyEventRadioButton.setVisible(false);
			groundStationBodyEventRadioButton.setVisible(false);
			CelestialBodyEventRadioButton.setVisible(false);

			break;

		// Node detector
		case NODE:

			jLabelEvent1.setVisible(false);

			eventTextField1.setVisible(false);

			jLabelEvent2.setVisible(false);

			eventTextField2.setVisible(false);

			jLabelEvent3.setVisible(false);

			eventTextField3.setVisible(false);

			bodyComboBox.setVisible(false);
			bodyLabel.setVisible(false);

			totalEclipseEventRadioButton.setVisible(false);
			penumbraEclipseEventRadioButton.setVisible(false);

			satBodyEventRadioButton.setVisible(false);
			groundStationBodyEventRadioButton.setVisible(false);
			CelestialBodyEventRadioButton.setVisible(false);

			break;

		}

	}

	private void bodyActionPerformed() {

	}

	private boolean saveSettings() {
		// save settings back to Node
		boolean saveSuccess = true;

		try {
			double[] vnc = mNode.getVncThrustVector();

			vnc[0] = Double.parseDouble(xTextField.getText());
			vnc[1] = Double.parseDouble(yTextField.getText());
			vnc[2] = Double.parseDouble(zTextField.getText());

			mNode.setEventsParams(new double[] {
					Double.parseDouble(eventTextField1.getText()),
					Double.parseDouble(eventTextField2.getText()),
					Double.parseDouble(eventTextField3.getText()) });

			switch (Events.getEnum(eventsComboBox.getSelectedItem().toString())) {

			// Alignment detector
			case ALIGNMENT:

				// Sat, ground station or celestial body
				mNode.setTargetBodyObjectName(bodyComboBox.getSelectedItem()
						.toString());
				mNode.setEvent(Events.ALIGNMENT);
				mNode.setEventsParams(new double[] {
						Double.parseDouble(eventTextField1.getText()), 0, 0 });

				if (satBodyEventRadioButton.isSelected()) {
					mNode.setTypeOfTarget(ManeuverNode.SATELLITEOBJECT);
				}

				else if (groundStationBodyEventRadioButton.isSelected()) {

					mNode.setTypeOfTarget(ManeuverNode.GROUNDSTATIONOBJECT);
				}

				else {

					mNode.setTypeOfTarget(ManeuverNode.CELESTIALBODYOBJECT);
				}

				break;

			// Altitude detector
			case ALTITUDE:

				mNode.setEvent(Events.ALTITUDE);

				break;

			// Apparent Elevation detector
			case APPARENTELEVATION:

				mNode.setEvent(Events.APPARENTELEVATION);

				break;

			// Apside detector
			case APSIDE:

				mNode.setEvent(Events.APSIDE);

				break;

			// Circular field of view detector
			case CIRCULARFIELDOFVIEW:

				mNode.setEvent(Events.CIRCULARFIELDOFVIEW);

				break;

			// Date Detector
			case DATE:
				mNode.setEvent(Events.DATE);

				break;

			// Dihedral field of view detector
			case DIHEDRALFIELDOFVIEW:

				mNode.setEvent(Events.DIHEDRALFIELDOFVIEW);

				break;

			// Eclipse detector
			case ECLIPSE:

				mNode.setEvent(Events.ECLIPSE);

				break;

			// Elevation detector
			case ELEVATION:

				mNode.setEvent(Events.ELEVATION);

				break;

			// Ground mask elevation detector
			case GROUNDMASKELEVATION:

				mNode.setEvent(Events.GROUNDMASKELEVATION);

				break;

			// Node detector
			case NODE:
				mNode.setEvent(Events.NODE);

				break;

			}

		} catch (Exception e) {
			JOptionPane.showMessageDialog(this,
					"Date format error, check input.", "Data ERROR",
					JOptionPane.ERROR_MESSAGE);
			saveSuccess = false;
		}

		return saveSuccess;

	}

	public JInternalFrame getIframe() {
		return iframe;
	}

	public void setIframe(JInternalFrame iframe) {
		this.iframe = iframe;
	}

	public enum Events {
		ALIGNMENT("Alignment"), ALTITUDE("Altitude"), APPARENTELEVATION(
				"Apparent Elevation"), APSIDE("Apside"), CIRCULARFIELDOFVIEW(
				"Circular field of view"), DATE("Date"), DIHEDRALFIELDOFVIEW(
				"Diheral field of view"), ECLIPSE("Eclipse"), ELEVATION(
				"Elevation"), GROUNDMASKELEVATION("Ground mask elevation"), NODE(
				"Node");

		private String value;

		private Events(String event) {
			this.value = event;
		}

		public String getEvent() {
			return value;
		}

		public static Object[] getValues() {

			ArrayList<String> eventList = new ArrayList<String>();

			for (Events e : Events.values()) {
				eventList.add(e.value);
			}

			return eventList.toArray();
		}

		public static Events getEnum(String value) {
			for (Events event : values()) {
				if (event.value.equals(value))
					return event;
			}
			return null;
		}

	}

	public enum CelestialBodyObject {

		SUN("Sun"), MERCURY("Mercury"), VENUS("Venus"), EARTH_MOON(
				"Earth-Moon barycenter"),

		EARTH("Earth"), MOON("Moon"), MARS("Mars"), JUPITER("Jupiter"), SATURN(
				"Saturn"),

		URANUS("Uranus"), NEPTUNE("Neptune"), PLUTO("Pluto");

		private String value;

		private CelestialBodyObject(String value) {
			this.value = value;

		}

		public static Object[] getValues() {

			ArrayList<String> bodyList = new ArrayList<String>();

			for (CelestialBodyObject e : CelestialBodyObject.values()) {
				bodyList.add(e.value);
			}

			return bodyList.toArray();
		}

		public String getBody() {
			return value;
		}
	}

}
