/*
 * ManeuverPanel.java
 * =====================================================================
 *   This file is part of JSatTrak.
 *
 *   Copyright 2007-2013 Shawn E. Gano
 *   
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *   
 *       http://www.apache.org/licenses/LICENSE-2.0
 *   
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 * =====================================================================
 *
 * Created on January 14, 2008, 1:16 PM
 */
package jsattrak.customsat.gui;

import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.Enumeration;

import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;

import jsattrak.customsat.EventNode;

import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.orekit.utils.Constants;

/**
 * 
 * @author sgano
 */
public class EventPanel extends javax.swing.JPanel {

	private static final long serialVersionUID = 4482028655884485117L;
	
	EventNode mNode;
	// used for diaplying settings panel
	private JInternalFrame iframe; // used to know what its parent frame is - to

	// close window

	/**
	 * Creates new form ManeuverPanel
	 */
	@SuppressWarnings("unchecked")
	public EventPanel(EventNode mNode, JInternalFrame iframe) {
		this.iframe = iframe;
		this.mNode = mNode;

		initComponents();

		// Built the satellite list defined by the user
		ArrayList<String> satList = getUserSatAndGroundstationList(true, false);

		bodyComboBox.setModel(new javax.swing.DefaultComboBoxModel(satList
				.toArray()));

		String event = mNode.getEvent().value;

		eventsComboBox.setSelectedItem(event);

		eventTextField1.setText(mNode.getEventsParams()[0] + "");
		eventTextField2.setText(mNode.getEventsParams()[1] + "");
		eventTextField3.setText(mNode.getEventsParams()[2] + "");

		totalEclipseEventRadioButton.setSelected(mNode.isTotalEclipse());
		penumbraEclipseEventRadioButton.setSelected(!mNode.isTotalEclipse());

		switch (Events.getEnum(event)) {

		case DIHEDRALFIELDOFVIEW:
			xTextField.setText(mNode.getPositionVector().getX() + "");
			yTextField.setText(mNode.getPositionVector().getY() + "");
			zTextField.setText(mNode.getPositionVector().getZ() + "");

			posXTextField.setText(mNode.getPositionVector2().getX() + "");
			posYTextField.setText(mNode.getPositionVector2().getY() + "");
			posZTextField.setText(mNode.getPositionVector2().getZ() + "");

			posX2TextField.setText(mNode.getPositionVector3().getX() + "");
			posY2TextField.setText(mNode.getPositionVector3().getY() + "");
			posZ2TextField.setText(mNode.getPositionVector3().getZ() + "");

			break;
		case CIRCULARFIELDOFVIEW:
			xTextField.setText(mNode.getPositionVector().getX() + "");
			yTextField.setText(mNode.getPositionVector().getY() + "");
			zTextField.setText(mNode.getPositionVector().getZ() + "");
			break;
		case ECLIPSE:
			celestialBodyComboBox
					.setModel(new javax.swing.DefaultComboBoxModel(
							CelestialBodyObject.getValues()));
			celestialBodyComboBox.setSelectedItem(mNode
					.getTargetCelestialBodyObjectName());
			break;

		}

		// Load the bodyComboBox

		// If an object was saved
		if (mNode.getTargetBodyObjectName() != null) {
			// Satellite object
			if (mNode.getTypeOfTarget() == EventNode.SATELLITEOBJECT) {
				satObjectRadioButtonActionPerformed(null);
			} // Ground station object
			else if (mNode.getTypeOfTarget() == EventNode.GROUNDSTATIONOBJECT) {
				groundStationBodyRadioButtonActionPerformed(null);
			} // Celestial body object
			else {
				celestialBodyRadioButtonActionPerformed(null);
			}
			bodyComboBox.setSelectedItem(mNode.getTargetBodyObjectName());
		}

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jInternalFrame1 = new javax.swing.JInternalFrame();
		okButton = new javax.swing.JButton();
		cancelButton = new javax.swing.JButton();
		applyButton = new javax.swing.JButton();
		jLabel1 = new javax.swing.JLabel();
		jPanelAlignment = new javax.swing.JPanel();
		dateTextField = new javax.swing.JTextField();
		jLabelEvent1 = new javax.swing.JLabel();
		jLabelEvent2 = new javax.swing.JLabel();
		jLabelEvent3 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		posLabel = new javax.swing.JLabel();
		pos2Label = new javax.swing.JLabel();
		eventTextField1 = new javax.swing.JTextField();
		eventTextField2 = new javax.swing.JTextField();
		eventTextField3 = new javax.swing.JTextField();
		bodyLabel = new javax.swing.JLabel();
		bodyComboBox = new javax.swing.JComboBox();
		CelestialBodyEventRadioButton = new javax.swing.JRadioButton();
		celestialBodyComboBox = new javax.swing.JComboBox();
		satBodyEventRadioButton = new javax.swing.JRadioButton();
		totalEclipseEventRadioButton = new javax.swing.JRadioButton();
		groundStationBodyEventRadioButton = new javax.swing.JRadioButton();
		penumbraEclipseEventRadioButton = new javax.swing.JRadioButton();
		xTextField = new javax.swing.JTextField();
		yTextField = new javax.swing.JTextField();
		zTextField = new javax.swing.JTextField();
		posXTextField = new javax.swing.JTextField();
		posYTextField = new javax.swing.JTextField();
		posZTextField = new javax.swing.JTextField();
		posX2TextField = new javax.swing.JTextField();
		posY2TextField = new javax.swing.JTextField();
		posZ2TextField = new javax.swing.JTextField();
		celestialBodyLabel = new javax.swing.JLabel();
		jPanel1 = new javax.swing.JPanel();
		jLabel5 = new javax.swing.JLabel();
		eventsComboBox = new javax.swing.JComboBox();

		jInternalFrame1.setVisible(true);

		javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(
				jInternalFrame1.getContentPane());
		jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
		jInternalFrame1Layout.setHorizontalGroup(jInternalFrame1Layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 0, Short.MAX_VALUE));
		jInternalFrame1Layout.setVerticalGroup(jInternalFrame1Layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 0, Short.MAX_VALUE));

		okButton.setText("Ok");
		okButton.setMaximumSize(new java.awt.Dimension(50, 26));
		okButton.setMinimumSize(new java.awt.Dimension(50, 26));
		okButton.setPreferredSize(new java.awt.Dimension(50, 26));
		okButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				okButtonActionPerformed(evt);
			}
		});

		cancelButton.setText("Cancel");
		cancelButton.setMaximumSize(new java.awt.Dimension(73, 26));
		cancelButton.setMinimumSize(new java.awt.Dimension(73, 26));
		cancelButton.setPreferredSize(new java.awt.Dimension(73, 26));
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancelButtonActionPerformed(evt);
			}
		});

		applyButton.setText("Apply");
		applyButton.setMaximumSize(new java.awt.Dimension(65, 26));
		applyButton.setMinimumSize(new java.awt.Dimension(65, 26));
		applyButton.setPreferredSize(new java.awt.Dimension(65, 26));
		applyButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				applyButtonActionPerformed(evt);
			}
		});

		jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
		jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabel1.setText("Event detector node :");
		jLabel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

		jPanelAlignment.setBorder(javax.swing.BorderFactory
				.createTitledBorder("Parameters"));
		jPanelAlignment.setMaximumSize(new java.awt.Dimension(32767, 128));
		jPanelAlignment.setMinimumSize(new java.awt.Dimension(379, 128));
		jPanelAlignment.setPreferredSize(new java.awt.Dimension(496, 128));

		jLabelEvent1.setText("LabelEvent1");

		jLabelEvent2.setText("LabelEvent2");

		jLabelEvent3.setText("LabelEvent3");

		jLabel2.setText("LabelPosition1");

		posLabel.setText("LabelPosition2");

		pos2Label.setText("LabelPosition3");

		eventTextField1.setMinimumSize(new java.awt.Dimension(141, 20));
		eventTextField1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				eventTextField1ActionPerformed(evt);
			}
		});

		eventTextField2.setMinimumSize(new java.awt.Dimension(141, 20));

		eventTextField3.setMinimumSize(new java.awt.Dimension(141, 20));

		bodyLabel.setText("BodyLabel1");

		bodyComboBox.setMinimumSize(new java.awt.Dimension(141, 20));
		bodyComboBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				bodyActionPerformed(evt);
			}
		});

		CelestialBodyEventRadioButton.setText("Celestial object");
		CelestialBodyEventRadioButton.setMaximumSize(new java.awt.Dimension(
				112, 24));
		CelestialBodyEventRadioButton.setMinimumSize(new java.awt.Dimension(
				112, 24));
		CelestialBodyEventRadioButton.setPreferredSize(new java.awt.Dimension(
				112, 24));

		celestialBodyComboBox.setMinimumSize(new java.awt.Dimension(141, 20));
		celestialBodyComboBox
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						celestialBodyComboBoxActionPerformed(evt);
					}
				});

		satBodyEventRadioButton.setSelected(true);
		satBodyEventRadioButton.setText("Satellite");
		satBodyEventRadioButton.setMaximumSize(new java.awt.Dimension(71, 24));
		satBodyEventRadioButton.setMinimumSize(new java.awt.Dimension(71, 24));
		satBodyEventRadioButton
				.setPreferredSize(new java.awt.Dimension(71, 24));

		totalEclipseEventRadioButton.setSelected(true);
		totalEclipseEventRadioButton.setText("Total eclipse detection");
		totalEclipseEventRadioButton.setMaximumSize(new java.awt.Dimension(153,
				24));
		totalEclipseEventRadioButton.setMinimumSize(new java.awt.Dimension(153,
				24));
		totalEclipseEventRadioButton.setPreferredSize(new java.awt.Dimension(
				153, 24));

		groundStationBodyEventRadioButton.setText("Ground station");
		groundStationBodyEventRadioButton
				.setMaximumSize(new java.awt.Dimension(108, 24));
		groundStationBodyEventRadioButton
				.setMinimumSize(new java.awt.Dimension(108, 24));
		groundStationBodyEventRadioButton
				.setPreferredSize(new java.awt.Dimension(108, 24));

		penumbraEclipseEventRadioButton.setText("Penumbra detection");
		penumbraEclipseEventRadioButton.setMaximumSize(new java.awt.Dimension(
				140, 24));
		penumbraEclipseEventRadioButton.setMinimumSize(new java.awt.Dimension(
				140, 24));
		penumbraEclipseEventRadioButton
				.setPreferredSize(new java.awt.Dimension(140, 24));

		xTextField.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				xTextFieldActionPerformed(evt);
			}
		});

		celestialBodyLabel.setBackground(new java.awt.Color(255, 255, 255));
		celestialBodyLabel.setText("CelestialBodyLabel");

		javax.swing.GroupLayout jPanelAlignmentLayout = new javax.swing.GroupLayout(
				jPanelAlignment);
		jPanelAlignment.setLayout(jPanelAlignmentLayout);
		jPanelAlignmentLayout
				.setHorizontalGroup(jPanelAlignmentLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanelAlignmentLayout
										.createSequentialGroup()
										.addGroup(
												jPanelAlignmentLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																jPanelAlignmentLayout
																		.createSequentialGroup()
																		.addGap(15,
																				15,
																				15)
																		.addGroup(
																				jPanelAlignmentLayout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.LEADING)
																						.addGroup(
																								jPanelAlignmentLayout
																										.createSequentialGroup()
																										.addComponent(
																												satBodyEventRadioButton,
																												javax.swing.GroupLayout.PREFERRED_SIZE,
																												javax.swing.GroupLayout.DEFAULT_SIZE,
																												javax.swing.GroupLayout.PREFERRED_SIZE)
																										.addPreferredGap(
																												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																										.addComponent(
																												groundStationBodyEventRadioButton,
																												javax.swing.GroupLayout.PREFERRED_SIZE,
																												106,
																												javax.swing.GroupLayout.PREFERRED_SIZE)
																										.addPreferredGap(
																												javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																										.addComponent(
																												CelestialBodyEventRadioButton,
																												javax.swing.GroupLayout.PREFERRED_SIZE,
																												101,
																												javax.swing.GroupLayout.PREFERRED_SIZE))
																						.addGroup(
																								jPanelAlignmentLayout
																										.createSequentialGroup()
																										.addComponent(
																												totalEclipseEventRadioButton,
																												javax.swing.GroupLayout.PREFERRED_SIZE,
																												javax.swing.GroupLayout.DEFAULT_SIZE,
																												javax.swing.GroupLayout.PREFERRED_SIZE)
																										.addPreferredGap(
																												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																										.addComponent(
																												penumbraEclipseEventRadioButton,
																												javax.swing.GroupLayout.PREFERRED_SIZE,
																												javax.swing.GroupLayout.DEFAULT_SIZE,
																												javax.swing.GroupLayout.PREFERRED_SIZE))))
														.addGroup(
																jPanelAlignmentLayout
																		.createSequentialGroup()
																		.addContainerGap()
																		.addGroup(
																				jPanelAlignmentLayout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.LEADING)
																						.addComponent(
																								celestialBodyLabel,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								120,
																								javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addComponent(
																								jLabelEvent1,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								120,
																								javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addComponent(
																								bodyLabel,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								120,
																								javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addComponent(
																								jLabelEvent3,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								120,
																								javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addComponent(
																								jLabel2,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								120,
																								javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addComponent(
																								posLabel,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								120,
																								javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addComponent(
																								jLabelEvent2,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								120,
																								javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addComponent(
																								pos2Label,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								120,
																								javax.swing.GroupLayout.PREFERRED_SIZE))
																		.addGap(30,
																				30,
																				30)
																		.addGroup(
																				jPanelAlignmentLayout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.LEADING)
																						.addGroup(
																								jPanelAlignmentLayout
																										.createParallelGroup(
																												javax.swing.GroupLayout.Alignment.LEADING,
																												false)
																										.addComponent(
																												celestialBodyComboBox,
																												0,
																												141,
																												Short.MAX_VALUE)
																										.addComponent(
																												bodyComboBox,
																												0,
																												javax.swing.GroupLayout.DEFAULT_SIZE,
																												Short.MAX_VALUE)
																										.addComponent(
																												eventTextField1,
																												javax.swing.GroupLayout.DEFAULT_SIZE,
																												javax.swing.GroupLayout.DEFAULT_SIZE,
																												Short.MAX_VALUE)
																										.addComponent(
																												eventTextField2,
																												javax.swing.GroupLayout.DEFAULT_SIZE,
																												javax.swing.GroupLayout.DEFAULT_SIZE,
																												Short.MAX_VALUE))
																						.addGroup(
																								jPanelAlignmentLayout
																										.createParallelGroup(
																												javax.swing.GroupLayout.Alignment.TRAILING,
																												false)
																										.addComponent(
																												eventTextField3,
																												javax.swing.GroupLayout.DEFAULT_SIZE,
																												javax.swing.GroupLayout.DEFAULT_SIZE,
																												Short.MAX_VALUE)
																										.addGroup(
																												jPanelAlignmentLayout
																														.createSequentialGroup()
																														.addGroup(
																																jPanelAlignmentLayout
																																		.createParallelGroup(
																																				javax.swing.GroupLayout.Alignment.LEADING,
																																				false)
																																		.addComponent(
																																				posX2TextField)
																																		.addComponent(
																																				posXTextField)
																																		.addComponent(
																																				xTextField,
																																				javax.swing.GroupLayout.PREFERRED_SIZE,
																																				40,
																																				javax.swing.GroupLayout.PREFERRED_SIZE))
																														.addGap(11,
																																11,
																																11)
																														.addGroup(
																																jPanelAlignmentLayout
																																		.createParallelGroup(
																																				javax.swing.GroupLayout.Alignment.LEADING)
																																		.addComponent(
																																				yTextField,
																																				javax.swing.GroupLayout.PREFERRED_SIZE,
																																				40,
																																				javax.swing.GroupLayout.PREFERRED_SIZE)
																																		.addComponent(
																																				posY2TextField,
																																				javax.swing.GroupLayout.PREFERRED_SIZE,
																																				40,
																																				javax.swing.GroupLayout.PREFERRED_SIZE)
																																		.addComponent(
																																				posYTextField,
																																				javax.swing.GroupLayout.PREFERRED_SIZE,
																																				40,
																																				javax.swing.GroupLayout.PREFERRED_SIZE))
																														.addPreferredGap(
																																javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																														.addGroup(
																																jPanelAlignmentLayout
																																		.createParallelGroup(
																																				javax.swing.GroupLayout.Alignment.TRAILING,
																																				false)
																																		.addComponent(
																																				zTextField,
																																				javax.swing.GroupLayout.Alignment.LEADING,
																																				javax.swing.GroupLayout.DEFAULT_SIZE,
																																				40,
																																				Short.MAX_VALUE)
																																		.addComponent(
																																				posZTextField,
																																				javax.swing.GroupLayout.Alignment.LEADING)
																																		.addComponent(
																																				posZ2TextField,
																																				javax.swing.GroupLayout.Alignment.LEADING))))))
														.addGroup(
																jPanelAlignmentLayout
																		.createSequentialGroup()
																		.addGap(77,
																				77,
																				77)
																		.addComponent(
																				dateTextField,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				160,
																				javax.swing.GroupLayout.PREFERRED_SIZE)))
										.addContainerGap(69, Short.MAX_VALUE)));
		jPanelAlignmentLayout
				.setVerticalGroup(jPanelAlignmentLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanelAlignmentLayout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanelAlignmentLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																satBodyEventRadioButton,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																groundStationBodyEventRadioButton,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																CelestialBodyEventRadioButton,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGap(11, 11, 11)
										.addGroup(
												jPanelAlignmentLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																totalEclipseEventRadioButton,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																penumbraEclipseEventRadioButton,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(
												dateTextField,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanelAlignmentLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(bodyLabel)
														.addComponent(
																bodyComboBox,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanelAlignmentLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																eventTextField1,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																jLabelEvent1))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanelAlignmentLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																celestialBodyComboBox,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																celestialBodyLabel,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																20,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanelAlignmentLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																eventTextField2,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																jLabelEvent2,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																17,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanelAlignmentLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																eventTextField3,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																jLabelEvent3,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanelAlignmentLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																yTextField,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																zTextField,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																xTextField,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																jLabel2,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																17,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanelAlignmentLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																posXTextField,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																posYTextField,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																posZTextField,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																posLabel,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																19,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanelAlignmentLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																posX2TextField,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																posY2TextField,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																posZ2TextField,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																pos2Label,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																18,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addContainerGap(119, Short.MAX_VALUE)));

		jPanel1.setBorder(javax.swing.BorderFactory
				.createTitledBorder("Event type"));

		jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
		jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabel5.setText("Alignment detector");
		jLabel5.setMaximumSize(new java.awt.Dimension(108, 16));
		jLabel5.setMinimumSize(new java.awt.Dimension(108, 16));
		jLabel5.setPreferredSize(new java.awt.Dimension(108, 16));

		eventsComboBox.setModel(new javax.swing.DefaultComboBoxModel(
				new String[] { "Alignment", "Altitude", "Apparent Elevation",
						"Apside", "Circular field of view", "Date",
						"Diheral field of view", "Eclipse", "Elevation",
						"Ground mask elevation", "Node" }));
		eventsComboBox.setMinimumSize(new java.awt.Dimension(158, 25));
		eventsComboBox.setPreferredSize(new java.awt.Dimension(158, 25));
		eventsComboBox.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				eventActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(
				jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout
				.setHorizontalGroup(jPanel1Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel1Layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanel1Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																jPanel1Layout
																		.createSequentialGroup()
																		.addComponent(
																				jLabel5,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				299,
																				Short.MAX_VALUE)
																		.addContainerGap())
														.addGroup(
																javax.swing.GroupLayout.Alignment.TRAILING,
																jPanel1Layout
																		.createSequentialGroup()
																		.addComponent(
																				eventsComboBox,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addGap(78,
																				78,
																				78)))));
		jPanel1Layout
				.setVerticalGroup(jPanel1Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel1Layout
										.createSequentialGroup()
										.addComponent(
												jLabel5,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(
												eventsComboBox,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addContainerGap()));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addGap(19, 19, 19)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.TRAILING,
												false)
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		okButton,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.PREFERRED_SIZE)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(
																		cancelButton,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.PREFERRED_SIZE)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(
																		applyButton,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.PREFERRED_SIZE))
												.addComponent(
														jPanelAlignment,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														0, Short.MAX_VALUE)
												.addComponent(
														jPanel1,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE)
												.addComponent(
														jLabel1,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE))
								.addContainerGap(21, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addGap(10, 10, 10)
								.addComponent(jLabel1,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										27,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addComponent(jPanel1,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										80,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(4, 4, 4)
								.addComponent(jPanelAlignment,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										296,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(
														okButton,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(
														cancelButton,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(
														applyButton,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addContainerGap(
										javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)));
	}// </editor-fold>//GEN-END:initComponents

	private void eventTextField1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_eventTextField1ActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_eventTextField1ActionPerformed

	private void xTextFieldActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_xTextFieldActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_xTextFieldActionPerformed

	private void bodyActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_bodyActionPerformed

		if (Events.getEnum(eventsComboBox.getSelectedItem().toString()).equals(
				Events.ECLIPSE)) {

			switch (CelestialBodyObject.getEnum(bodyComboBox.getSelectedItem()
					.toString())) {
			// Set the default radius of planets
			case SUN:
				eventTextField1.setText(Double
						.toString(CelestialBodyObject.SUN.equatorialRadius));
				break;
			case EARTH:
				eventTextField1.setText(Double
						.toString(CelestialBodyObject.EARTH.equatorialRadius));
				break;
			case MERCURY:
				eventTextField1
						.setText(Double
								.toString(CelestialBodyObject.MERCURY.equatorialRadius));
				break;
			case VENUS:
				eventTextField1.setText(Double
						.toString(CelestialBodyObject.VENUS.equatorialRadius));
				break;
			case MOON:
				eventTextField1.setText(Double
						.toString(CelestialBodyObject.MOON.equatorialRadius));
				break;
			case MARS:
				eventTextField1.setText(Double
						.toString(CelestialBodyObject.MARS.equatorialRadius));
				break;
			case JUPITER:
				eventTextField1
						.setText(Double
								.toString(CelestialBodyObject.JUPITER.equatorialRadius));
				break;
			case SATURN:
				eventTextField1.setText(Double
						.toString(CelestialBodyObject.SATURN.equatorialRadius));
				break;
			case URANUS:
				eventTextField1.setText(Double
						.toString(CelestialBodyObject.URANUS.equatorialRadius));
				break;
			case NEPTUNE:
				eventTextField1
						.setText(Double
								.toString(CelestialBodyObject.NEPTUNE.equatorialRadius));
				break;
			case PLUTON:
				eventTextField1.setText(Double
						.toString(CelestialBodyObject.PLUTON.equatorialRadius));
				break;
			default:
				eventTextField1.setText(0 + "");
			}
		}
	}// GEN-LAST:event_bodyActionPerformed

	private void celestialBodyComboBoxActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_celestialBodyComboBoxActionPerformed

		if (Events.getEnum(eventsComboBox.getSelectedItem().toString()).equals(
				Events.ECLIPSE)) {

			switch (CelestialBodyObject.getEnum(celestialBodyComboBox
					.getSelectedItem().toString())) {
			// Set the default radius of planets
			case SUN:
				eventTextField2.setText(Double
						.toString(CelestialBodyObject.SUN.equatorialRadius));
				break;
			case EARTH:
				eventTextField2.setText(Double
						.toString(CelestialBodyObject.EARTH.equatorialRadius));
				break;
			case MERCURY:
				eventTextField2
						.setText(Double
								.toString(CelestialBodyObject.MERCURY.equatorialRadius));
				break;
			case VENUS:
				eventTextField2.setText(Double
						.toString(CelestialBodyObject.VENUS.equatorialRadius));
				break;
			case MOON:
				eventTextField2.setText(Double
						.toString(CelestialBodyObject.MOON.equatorialRadius));
				break;
			case MARS:
				eventTextField2.setText(Double
						.toString(CelestialBodyObject.MARS.equatorialRadius));
				break;
			case JUPITER:
				eventTextField2
						.setText(Double
								.toString(CelestialBodyObject.JUPITER.equatorialRadius));
				break;
			case SATURN:
				eventTextField2.setText(Double
						.toString(CelestialBodyObject.SATURN.equatorialRadius));
				break;
			case URANUS:
				eventTextField2.setText(Double
						.toString(CelestialBodyObject.URANUS.equatorialRadius));
				break;
			case NEPTUNE:
				eventTextField2
						.setText(Double
								.toString(CelestialBodyObject.NEPTUNE.equatorialRadius));
				break;
			case PLUTON:
				eventTextField2.setText(Double
						.toString(CelestialBodyObject.PLUTON.equatorialRadius));
				break;
			default:
				eventTextField2.setText(0 + "");
			}
		}
	}// GEN-LAST:event_celestialBodyComboBoxActionPerformed

	private void okButtonActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_okButtonActionPerformed
	{// GEN-HEADEREND:event_okButtonActionPerformed
		boolean success = saveSettings();

		// close internal frame
		if (success) {
			try {
				iframe.dispose(); // could setClosed(true)
			} catch (Exception e) {
			}
		}
	}// GEN-LAST:event_okButtonActionPerformed

	private void addButtonActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_okButtonActionPerformed
	{// GEN-HEADEREND:event_okButtonActionPerformed
		boolean success = saveSettings();

		// close internal frame
		if (success) {
			try {
				iframe.dispose(); // could setClosed(true)
			} catch (Exception e) {
			}
		}
	}// GEN-LAST:event_okButtonActionPerformed

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_cancelButtonActionPerformed
	{// GEN-HEADEREND:event_cancelButtonActionPerformed
		// close internal frame
		try {
			iframe.dispose(); // could setClosed(true)
		} catch (Exception e) {
		}
	}// GEN-LAST:event_cancelButtonActionPerformed

	private void applyButtonActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_applyButtonActionPerformed
	{// GEN-HEADEREND:event_applyButtonActionPerformed
		saveSettings();
	}// GEN-LAST:event_applyButtonActionPerformed

	private void yTextFieldActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_yTextFieldActionPerformed
	{// GEN-HEADEREND:event_yTextFieldActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_yTextFieldActionPerformed

	private void totalEclipseRadioButtonActionPerformed(
			java.awt.event.ActionEvent evt)// GEN-FIRST:event_eciRadioButtonActionPerformed
	{// GEN-HEADEREND:event_eciRadioButtonActionPerformed
		totalEclipseEventRadioButton.setSelected(true);
		penumbraEclipseEventRadioButton.setSelected(false);
	}// GEN-LAST:event_eciRadioButtonActionPerformed

	private void penumbraEclipseRadioButtonActionPerformed(
			java.awt.event.ActionEvent evt)// GEN-FIRST:event_ecefRadioButtonActionPerformed
	{// GEN-HEADEREND:event_ecefRadioButtonActionPerformed
		totalEclipseEventRadioButton.setSelected(false);
		penumbraEclipseEventRadioButton.setSelected(true);
	}// GEN-LAST:event_ecefRadioButtonActionPerformed

	@SuppressWarnings("unchecked")
	private void satObjectRadioButtonActionPerformed(
			java.awt.event.ActionEvent evt)// GEN-FIRST:event_ecefRadioButtonActionPerformed
	{// GEN-HEADEREND:event_ecefRadioButtonActionPerformed

		// Construction de la liste des satellites definis par l'utilisateur
		ArrayList<String> satList = getUserSatAndGroundstationList(true, false);
		bodyComboBox.setModel(new javax.swing.DefaultComboBoxModel(satList
				.toArray()));

		satBodyEventRadioButton.setSelected(true);
		groundStationBodyEventRadioButton.setSelected(false);
		CelestialBodyEventRadioButton.setSelected(false);
	}// GEN-LAST:event_ecefRadioButtonActionPerformed

	@SuppressWarnings("unchecked")
	private void groundStationBodyRadioButtonActionPerformed(
			java.awt.event.ActionEvent evt)// GEN-FIRST:event_ecefRadioButtonActionPerformed
	{// GEN-HEADEREND:event_ecefRadioButtonActionPerformed

		// Construction de la liste des stations sols definis par l'utilisateur
		ArrayList<String> groundStationList = getUserSatAndGroundstationList(
				false, true);
		bodyComboBox.setModel(new javax.swing.DefaultComboBoxModel(
				groundStationList.toArray()));

		satBodyEventRadioButton.setSelected(false);
		groundStationBodyEventRadioButton.setSelected(true);
		CelestialBodyEventRadioButton.setSelected(false);
	}// GEN-LAST:event_ecefRadioButtonActionPerformed

	@SuppressWarnings("unchecked")
	private void celestialBodyRadioButtonActionPerformed(
			java.awt.event.ActionEvent evt)// GEN-FIRST:event_ecefRadioButtonActionPerformed
	{// GEN-HEADEREND:event_ecefRadioButtonActionPerformed

		// Recupere la liste des objets celestes
		bodyComboBox.setModel(new javax.swing.DefaultComboBoxModel(
				CelestialBodyObject.getValues()));

		satBodyEventRadioButton.setSelected(false);
		groundStationBodyEventRadioButton.setSelected(false);
		CelestialBodyEventRadioButton.setSelected(true);
	}// GEN-LAST:event_ecefRadioButtonActionPerformed
		// Variables declaration - do not modify//GEN-BEGIN:variables

	private javax.swing.JRadioButton CelestialBodyEventRadioButton;
	private javax.swing.JButton applyButton;
	private javax.swing.JComboBox bodyComboBox;
	private javax.swing.JLabel bodyLabel;
	private javax.swing.JButton cancelButton;
	private javax.swing.JComboBox celestialBodyComboBox;
	private javax.swing.JLabel celestialBodyLabel;
	private javax.swing.JTextField dateTextField;
	private javax.swing.JTextField eventTextField1;
	private javax.swing.JTextField eventTextField2;
	private javax.swing.JTextField eventTextField3;
	private javax.swing.JComboBox eventsComboBox;
	private javax.swing.JRadioButton groundStationBodyEventRadioButton;
	private javax.swing.JInternalFrame jInternalFrame1;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabelEvent1;
	private javax.swing.JLabel jLabelEvent2;
	private javax.swing.JLabel jLabelEvent3;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanelAlignment;
	private javax.swing.JButton okButton;
	private javax.swing.JRadioButton penumbraEclipseEventRadioButton;
	private javax.swing.JLabel pos2Label;
	private javax.swing.JLabel posLabel;
	private javax.swing.JTextField posX2TextField;
	private javax.swing.JTextField posXTextField;
	private javax.swing.JTextField posY2TextField;
	private javax.swing.JTextField posYTextField;
	private javax.swing.JTextField posZ2TextField;
	private javax.swing.JTextField posZTextField;
	private javax.swing.JRadioButton satBodyEventRadioButton;
	private javax.swing.JRadioButton totalEclipseEventRadioButton;
	private javax.swing.JTextField xTextField;
	private javax.swing.JTextField yTextField;
	private javax.swing.JTextField zTextField;

	// End of variables declaration//GEN-END:variables

	@SuppressWarnings("unchecked")
	private void eventActionPerformed(ActionEvent evt) {

		eventTextField1.setText(0.0 + "");
		eventTextField2.setText(0.0 + "");
		eventTextField3.setText(0.0 + "");

		xTextField.setText(0.0 + "");
		yTextField.setText(0.0 + "");
		zTextField.setText(0.0 + "");

		posXTextField.setText(0.0 + "");
		posYTextField.setText(0.0 + "");
		posZTextField.setText(0.0 + "");

		posX2TextField.setText(0.0 + "");
		posY2TextField.setText(0.0 + "");
		posZ2TextField.setText(0.0 + "");

		// Reset to false
		jLabelEvent1.setVisible(false);
		eventTextField1.setVisible(false);
		jLabelEvent2.setVisible(false);
		eventTextField2.setVisible(false);
		jLabelEvent3.setVisible(false);
		eventTextField3.setVisible(false);
		bodyComboBox.setVisible(false);
		celestialBodyComboBox.setVisible(false);
		bodyLabel.setVisible(false);
		celestialBodyLabel.setVisible(false);
		totalEclipseEventRadioButton.setVisible(false);
		penumbraEclipseEventRadioButton.setVisible(false);
		satBodyEventRadioButton.setVisible(false);
		groundStationBodyEventRadioButton.setVisible(false);
		CelestialBodyEventRadioButton.setVisible(false);
		jLabel2.setVisible(false);
		xTextField.setVisible(false);
		yTextField.setVisible(false);
		zTextField.setVisible(false);
		posLabel.setVisible(false);
		posXTextField.setVisible(false);
		posYTextField.setVisible(false);
		posZTextField.setVisible(false);
		pos2Label.setVisible(false);
		posX2TextField.setVisible(false);
		posY2TextField.setVisible(false);
		posZ2TextField.setVisible(false);
		dateTextField.setVisible(false);

		ArrayList<String> satAndGroundstationList = null;

		switch (Events.getEnum(eventsComboBox.getSelectedItem().toString())) {

		// Alignment detector
		case ALIGNMENT:

			jLabel5.setText("Alignment detector");
			// First parameter
			jLabelEvent1.setText("Align angle [deg] :");
			jLabelEvent1.setVisible(true);
			eventTextField1.setVisible(true);

			// Load satellites into comboBox
			satObjectRadioButtonActionPerformed(null);

			bodyLabel.setText("Body to align :");
			bodyComboBox.setVisible(true);
			bodyLabel.setVisible(true);

			// Radio boutons for choosing type of object
			satBodyEventRadioButton.setVisible(true);
			groundStationBodyEventRadioButton.setVisible(true);
			CelestialBodyEventRadioButton.setVisible(true);

			break;

		// Altitude detector
		case ALTITUDE:
			jLabel5.setText("Altitude detector");
			// First parameter
			jLabelEvent1.setText("Altitude Value [m] :");
			jLabelEvent1.setVisible(true);
			eventTextField1.setVisible(true);

			break;

		// Apparent Elevation detector
		case APPARENTELEVATION:
			jLabel5.setText("Apparent Elevation detector");
			// First parameter
			jLabelEvent1.setText("Elevation Value [deg] :");
			jLabelEvent1.setVisible(true);
			eventTextField1.setVisible(true);

			// Construction de la liste des satellites et stations sols definies
			// par l'utilisateur
			satAndGroundstationList = getUserSatAndGroundstationList(false,
					true);
			bodyComboBox.setModel(new javax.swing.DefaultComboBoxModel(
					satAndGroundstationList.toArray()));

			bodyLabel.setText("Groundstation :");
			bodyComboBox.setVisible(true);
			bodyLabel.setVisible(true);

			break;

		// Apside detector
		case APSIDE:
			jLabel5.setText("Apside detector");
			break;

		// Circular field of view detector
		case CIRCULARFIELDOFVIEW:
			jLabel5.setText("Circular field of view detector");
			// First parameter
			jLabelEvent1.setText("Max Interval [sec] :");
			jLabelEvent1.setVisible(true);
			eventTextField1.setVisible(true);

			// Second parameter
			jLabelEvent2.setText("Half Aperture [deg] :");
			jLabelEvent2.setVisible(true);
			eventTextField2.setVisible(true);

			// third parameter
			jLabel2.setText("Center of the fov [m] :");
			jLabel2.setVisible(true);
			xTextField.setVisible(true);
			yTextField.setVisible(true);
			zTextField.setVisible(true);

			// Load satellites into comboBox
			satObjectRadioButtonActionPerformed(null);
			// Radio button for choosing wich type of target
			satBodyEventRadioButton.setVisible(true);
			groundStationBodyEventRadioButton.setVisible(true);
			CelestialBodyEventRadioButton.setVisible(true);

			bodyLabel.setText("Considered target :");
			bodyComboBox.setVisible(true);
			bodyLabel.setVisible(true);

			break;

		// Date Detector
		case DATE:
			jLabel5.setText("Date Detector");

			dateTextField.setText(mNode.getDateformatShort().format(
					mNode.getCurrentTimeDate().getTime()));

			dateTextField.setVisible(true);

			break;

		// Dihedral field of view detector
		case DIHEDRALFIELDOFVIEW:
			jLabel5.setText("Dihedral field of view detector");
			// First parameter
			jLabelEvent1.setText("Max interval [sec] :");
			jLabelEvent1.setVisible(true);
			eventTextField1.setVisible(true);

			// Second parameter
			jLabelEvent2.setText("Half aperture 1 [deg] :");
			jLabelEvent2.setVisible(true);
			eventTextField2.setVisible(true);

			// third parameter
			jLabelEvent3.setText("Half aperture 2 [deg] :");
			jLabelEvent3.setVisible(true);
			eventTextField3.setVisible(true);

			// Fourth parameter
			jLabel2.setText("Center of the fov [m] :");
			jLabel2.setVisible(true);
			xTextField.setVisible(true);
			yTextField.setVisible(true);
			zTextField.setVisible(true);

			// Fifth parameter
			posLabel.setText("Fov dihedral axis 1 [m] :");
			posLabel.setVisible(true);
			posXTextField.setVisible(true);
			posYTextField.setVisible(true);
			posZTextField.setVisible(true);

			// sixth parameter
			pos2Label.setText("Fov dihedral axis 2 [m] :");
			pos2Label.setVisible(true);
			posX2TextField.setVisible(true);
			posY2TextField.setVisible(true);
			posZ2TextField.setVisible(true);

			// Load satellites into comboBox
			satObjectRadioButtonActionPerformed(null);
			// Radio button for choosing wich type of target
			satBodyEventRadioButton.setVisible(true);
			groundStationBodyEventRadioButton.setVisible(true);
			CelestialBodyEventRadioButton.setVisible(true);

			bodyLabel.setText("Considered target :");
			bodyComboBox.setVisible(true);
			bodyLabel.setVisible(true);

			break;

		// Eclipse detector
		case ECLIPSE:
			jLabel5.setText("Eclipse detector");
			// First parameter
			jLabelEvent1.setText("Occulted Radius [m] :");
			jLabelEvent1.setVisible(true);
			eventTextField1.setText(Constants.SUN_RADIUS + "");
			eventTextField1.setVisible(true);

			// second parameter
			jLabelEvent2.setText("Occulting Radius [m] :");
			jLabelEvent2.setVisible(true);
			eventTextField2.setText(Constants.SUN_RADIUS + "");
			eventTextField2.setVisible(true);

			// First body combo box
			celestialBodyRadioButtonActionPerformed(null);
			bodyLabel.setText("Occulted body :");
			bodyComboBox.setVisible(true);
			bodyLabel.setVisible(true);

			// Second body combo box
			celestialBodyLabel.setText("Occulting body :");
			celestialBodyLabel.setVisible(true);
			celestialBodyComboBox.setVisible(true);
			celestialBodyComboBox
					.setModel(new javax.swing.DefaultComboBoxModel(
							CelestialBodyObject.getValues()));
			celestialBodyComboBox
					.setSelectedItem(CelestialBodyObject.EARTH.value);

			// Radio bouton for the type of eclipse
			totalEclipseEventRadioButton.setVisible(true);
			penumbraEclipseEventRadioButton.setVisible(true);

			break;

		// Elevation detector
		case ELEVATION:
			jLabel5.setText("Elevation detector");
			// First parameter
			jLabelEvent1.setText("Elevation [deg] :");
			jLabelEvent1.setVisible(true);
			eventTextField1.setVisible(true);

			// Construction de la liste des satellites et stations sols definies
			// par l'utilisateur
			satAndGroundstationList = getUserSatAndGroundstationList(false,
					true);
			bodyComboBox.setModel(new javax.swing.DefaultComboBoxModel(
					satAndGroundstationList.toArray()));

			bodyLabel.setText("Groundstation :");
			bodyComboBox.setVisible(true);
			bodyLabel.setVisible(true);

			break;

		// Ground mask elevation detector
		case GROUNDMASKELEVATION:
			jLabel5.setText("Ground mask elevation detector");
			break;

		// Node detector
		case NODE:
			jLabel5.setText("Node detector");
			break;

		}

	}

	private ArrayList<String> getUserSatAndGroundstationList(boolean sat,
			boolean groundstation) {

		// Built satellites and ground stations list defined by the user
		ArrayList<String> satAndGroundstationList = new ArrayList<String>();

		if (sat) {
			for (Enumeration<String> e = mNode.getUserSatList().keys(); e
					.hasMoreElements();) {
				String satName = e.nextElement();
				// Not take into acount for the current sat
				// if (!satName.equals(mNode.getCurrentSat().getName()))
				satAndGroundstationList.add(satName);

			}
		}

		if (groundstation) {

			for (Enumeration<String> e = mNode.getUserGroundStationsList()
					.keys(); e.hasMoreElements();) {
				satAndGroundstationList.add(e.nextElement());

			}

		}
		return satAndGroundstationList;

	}

	private boolean saveSettings() {
		// save settings back to Node
		boolean saveSuccess = true;

		try {

			mNode.setEventsParams(new double[] {
					Double.parseDouble(eventTextField1.getText()),
					Double.parseDouble(eventTextField2.getText()),
					Double.parseDouble(eventTextField3.getText()) });

			switch (Events.getEnum(eventsComboBox.getSelectedItem().toString())) {

			// Alignment detector
			case ALIGNMENT:

				// Sat, ground station or celestial body
				mNode.setTargetBodyObjectName(bodyComboBox.getSelectedItem()
						.toString());
				mNode.setEvent(Events.ALIGNMENT);

				if (satBodyEventRadioButton.isSelected()) {
					mNode.setTypeOfTarget(EventNode.SATELLITEOBJECT);
				} else if (groundStationBodyEventRadioButton.isSelected()) {

					mNode.setTypeOfTarget(EventNode.GROUNDSTATIONOBJECT);
				} else {

					mNode.setTypeOfTarget(EventNode.CELESTIALBODYOBJECT);
				}

				break;

			// Altitude detector
			case ALTITUDE:

				mNode.setEvent(Events.ALTITUDE);

				break;

			// Apparent Elevation detector
			case APPARENTELEVATION:
				mNode.setTargetBodyObjectName(bodyComboBox.getSelectedItem()
						.toString());
				mNode.setTypeOfTarget(EventNode.GROUNDSTATIONOBJECT);

				mNode.setEvent(Events.APPARENTELEVATION);

				break;

			// Apside detector
			case APSIDE:

				mNode.setEvent(Events.APSIDE);

				break;

			// Circular field of view detector
			case CIRCULARFIELDOFVIEW:

				mNode.setTargetBodyObjectName(bodyComboBox.getSelectedItem()
						.toString());

				if (satBodyEventRadioButton.isSelected()) {
					mNode.setTypeOfTarget(EventNode.SATELLITEOBJECT);
				} else if (groundStationBodyEventRadioButton.isSelected()) {

					mNode.setTypeOfTarget(EventNode.GROUNDSTATIONOBJECT);
				} else {

					mNode.setTypeOfTarget(EventNode.CELESTIALBODYOBJECT);
				}

				mNode.setEventsParams(new double[] {
						Double.parseDouble(eventTextField1.getText()),
						Double.parseDouble(eventTextField2.getText()), 0 });
				mNode.setPositionVector(new Vector3D(Double
						.parseDouble(xTextField.getText()), Double
						.parseDouble(yTextField.getText()), Double
						.parseDouble(zTextField.getText())));

				mNode.setEvent(Events.CIRCULARFIELDOFVIEW);

				break;

			// Date Detector
			case DATE:

				mNode.getCurrentTimeDate().setTime(
						mNode.getDateformatShort().parse(
								dateTextField.getText()));

				mNode.setEvent(Events.DATE);

				break;

			// Dihedral field of view detector
			case DIHEDRALFIELDOFVIEW:

				mNode.setTargetBodyObjectName(bodyComboBox.getSelectedItem()
						.toString());

				if (satBodyEventRadioButton.isSelected()) {
					mNode.setTypeOfTarget(EventNode.SATELLITEOBJECT);
				} else if (groundStationBodyEventRadioButton.isSelected()) {

					mNode.setTypeOfTarget(EventNode.GROUNDSTATIONOBJECT);
				} else {

					mNode.setTypeOfTarget(EventNode.CELESTIALBODYOBJECT);
				}

				mNode.setEventsParams(new double[] {
						Double.parseDouble(eventTextField1.getText()),
						Double.parseDouble(eventTextField2.getText()),
						Double.parseDouble(eventTextField3.getText()) });

				// Direction of the fov center
				mNode.setPositionVector(new Vector3D(Double
						.parseDouble(xTextField.getText()), Double
						.parseDouble(yTextField.getText()), Double
						.parseDouble(zTextField.getText())));

				// Fov dihedral axis 1
				mNode.setPositionVector2(new Vector3D(Double
						.parseDouble(posXTextField.getText()), Double
						.parseDouble(posYTextField.getText()), Double
						.parseDouble(posZTextField.getText())));

				// Fov dihedral axis 2

				mNode.setPositionVector3(new Vector3D(Double
						.parseDouble(posX2TextField.getText()), Double
						.parseDouble(posY2TextField.getText()), Double
						.parseDouble(posZ2TextField.getText())));

				mNode.setEvent(Events.DIHEDRALFIELDOFVIEW);

				break;

			// Eclipse detector
			case ECLIPSE:

				mNode.setTargetBodyObjectName(bodyComboBox.getSelectedItem()
						.toString());

				mNode.setTargetCelestialBodyObjectName(celestialBodyComboBox
						.getSelectedItem().toString());

				mNode.setTypeOfTarget(EventNode.CELESTIALBODYOBJECT);

				mNode.setTotalEclipse(totalEclipseEventRadioButton.isSelected());

				mNode.setEvent(Events.ECLIPSE);

				break;

			// Elevation detector
			case ELEVATION:

				mNode.setTargetBodyObjectName(bodyComboBox.getSelectedItem()
						.toString());
				mNode.setTypeOfTarget(EventNode.GROUNDSTATIONOBJECT);

				mNode.setEvent(Events.ELEVATION);

				break;

			// Ground mask elevation detector
			case GROUNDMASKELEVATION:

				mNode.setEvent(Events.GROUNDMASKELEVATION);

				break;

			// Node detector
			case NODE:
				mNode.setEvent(Events.NODE);

				break;

			}

		} catch (Exception e) {
			JOptionPane.showMessageDialog(this,
					"Date format error, check input.", "Data ERROR",
					JOptionPane.ERROR_MESSAGE);
			saveSuccess = false;
		}

		return saveSuccess;

	}

	public JInternalFrame getIframe() {
		return iframe;
	}

	public void setIframe(JInternalFrame iframe) {
		this.iframe = iframe;
	}

	public enum Events {

		ALIGNMENT("Alignment"), ALTITUDE("Altitude"), APPARENTELEVATION(
				"Apparent Elevation"), APSIDE("Apside"), CIRCULARFIELDOFVIEW(
				"Circular field of view"), DATE("Date"), DIHEDRALFIELDOFVIEW(
				"Diheral field of view"), ECLIPSE("Eclipse"), ELEVATION(
				"Elevation"), GROUNDMASKELEVATION("Ground mask elevation"), NODE(
				"Node");
		private String value;

		private Events(String event) {
			this.value = event;
		}

		public String getEvent() {
			return value;
		}

		public static Object[] getValues() {

			ArrayList<String> eventList = new ArrayList<String>();

			for (Events e : Events.values()) {
				eventList.add(e.value);
			}

			return eventList.toArray();
		}

		public static Events getEnum(String value) {
			for (Events event : values()) {
				if (event.value.equals(value)) {
					return event;
				}
			}
			return null;
		}
	}

	public enum CelestialBodyObject {

		SUN("Sun", Constants.SUN_RADIUS), MERCURY("Mercury", 2439700), VENUS(
				"Venus", 6051800), EARTH("Earth",
				Constants.WGS84_EARTH_EQUATORIAL_RADIUS), MOON("Moon", 1737400), MARS(
				"Mars", 3396200), JUPITER("Jupiter", 71492000), SATURN(
				"Saturn", 60268000), URANUS("Uranus", 25559000), NEPTUNE(
				"Neptune", 24764000), PLUTON("Pluton", 1153000);
		private String value;
		private double equatorialRadius;

		private CelestialBodyObject(String value, double equatorialRadius) {
			this.value = value;
			this.equatorialRadius = equatorialRadius;

		}

		public static Object[] getValues() {

			ArrayList<String> bodyList = new ArrayList<String>();

			for (CelestialBodyObject e : CelestialBodyObject.values()) {
				bodyList.add(e.value);
			}

			return bodyList.toArray();
		}

		public static CelestialBodyObject getEnum(String value) {
			for (CelestialBodyObject celestialBody : values()) {
				if (celestialBody.value.equals(value)) {
					return celestialBody;
				}
			}
			return null;
		}

		public String getBody() {
			return value;
		}

		public double getEquatorialRadius() {
			return equatorialRadius;
		}
	}
}
