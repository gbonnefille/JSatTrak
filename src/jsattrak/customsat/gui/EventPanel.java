/*
 * ManeuverPanel.java
 * =====================================================================
 * Copyright (C) 2009 Shawn E. Gano
 * 
 * This file is part of JSatTrak.
 * 
 * JSatTrak is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * JSatTrak is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with JSatTrak.  If not, see <http://www.gnu.org/licenses/>.
 * =====================================================================
 *
 * Created on January 14, 2008, 1:16 PM
 */

package jsattrak.customsat.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.GregorianCalendar;

import javax.swing.JFormattedTextField;
import javax.swing.JFormattedTextField.AbstractFormatterFactory;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.text.DateFormatter;

import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.orekit.utils.Constants;

import jsattrak.customsat.EventNode;
import jsattrak.customsat.gui.EventPanel.Events;

/**
 * 
 * @author sgano
 */
public class EventPanel extends javax.swing.JPanel {

	EventNode mNode;

	// used for diaplying settings panel
	private JInternalFrame iframe; // used to know what its parent frame is - to
									// close window

	/** Creates new form ManeuverPanel */
	public EventPanel(EventNode mNode, JInternalFrame iframe) {
		this.iframe = iframe;
		this.mNode = mNode;

		initComponents();

		String event = mNode.getEvent().value;

		eventsComboBox.setSelectedItem(event);

		eventTextField1.setText(mNode.getEventsParams()[0] + "");
		eventTextField2.setText(mNode.getEventsParams()[1] + "");
		eventTextField3.setText(mNode.getEventsParams()[2] + "");

		totalEclipseEventRadioButton.setSelected(mNode.isTotalEclipse());
		penumbraEclipseEventRadioButton.setSelected(!mNode.isTotalEclipse());

		switch (Events.getEnum(event)) {

		case DIHEDRALFIELDOFVIEW:
			xTextField.setText(mNode.getPositionVector().getX() + "");
			yTextField.setText(mNode.getPositionVector().getY() + "");
			zTextField.setText(mNode.getPositionVector().getZ() + "");

			posXTextField.setText(mNode.getPositionVector2().getX() + "");
			posYTextField.setText(mNode.getPositionVector2().getY() + "");
			posZTextField.setText(mNode.getPositionVector2().getZ() + "");

			posX2TextField.setText(mNode.getPositionVector3().getX() + "");
			posY2TextField.setText(mNode.getPositionVector3().getY() + "");
			posZ2TextField.setText(mNode.getPositionVector3().getZ() + "");

			break;
		case CIRCULARFIELDOFVIEW:
			xTextField.setText(mNode.getPositionVector().getX() + "");
			yTextField.setText(mNode.getPositionVector().getY() + "");
			zTextField.setText(mNode.getPositionVector().getZ() + "");
			break;
		case ECLIPSE:
			celestialBodyComboBox
					.setModel(new javax.swing.DefaultComboBoxModel(
							CelestialBodyObject.getValues()));
			celestialBodyComboBox.setSelectedItem(mNode
					.getTargetCelestialBodyObjectName());
			break;

		}

		// Load the bodyComboBox

		// If an object was saved
		if (mNode.getTargetBodyObjectName() != null) {
			// Satellite object
			if (mNode.getTypeOfTarget() == EventNode.SATELLITEOBJECT) {
				satObjectRadioButtonActionPerformed(null);
			}
			// Ground station object
			else if (mNode.getTypeOfTarget() == EventNode.GROUNDSTATIONOBJECT) {
				groundStationBodyRadioButtonActionPerformed(null);
			}
			// Celestial body object
			else {
				celestialBodyRadioButtonActionPerformed(null);
			}
			bodyComboBox.setSelectedItem(mNode.getTargetBodyObjectName());
		}

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jLabel1 = new javax.swing.JLabel();
		okButton = new javax.swing.JButton();
		addButton = new javax.swing.JButton();
		cancelButton = new javax.swing.JButton();
		applyButton = new javax.swing.JButton();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		jLabel5 = new javax.swing.JLabel();
		yTextField = new javax.swing.JTextField();
		xTextField = new javax.swing.JTextField();
		zTextField = new javax.swing.JTextField();

		eventsComboBox = new javax.swing.JComboBox();
		jLabelEvents = new javax.swing.JLabel();
		jPanelEvent = new javax.swing.JPanel();
		jLabelEvent1 = new javax.swing.JLabel();
		jLabelEvent2 = new javax.swing.JLabel();
		jLabelEvent3 = new javax.swing.JLabel();
		eventTextField1 = new javax.swing.JTextField();
		eventTextField2 = new javax.swing.JTextField();
		eventTextField3 = new javax.swing.JTextField();
		totalEclipseEventRadioButton = new javax.swing.JRadioButton();
		penumbraEclipseEventRadioButton = new javax.swing.JRadioButton();
		satBodyEventRadioButton = new javax.swing.JRadioButton();
		groundStationBodyEventRadioButton = new javax.swing.JRadioButton();
		CelestialBodyEventRadioButton = new javax.swing.JRadioButton();

		posLabel = new javax.swing.JLabel();
		posYTextField = new javax.swing.JTextField();
		posXTextField = new javax.swing.JTextField();
		posZTextField = new javax.swing.JTextField();

		pos2Label = new javax.swing.JLabel();
		posY2TextField = new javax.swing.JTextField();
		posX2TextField = new javax.swing.JTextField();
		posZ2TextField = new javax.swing.JTextField();

		dateTextField = new javax.swing.JTextField();

		bodyComboBox = new javax.swing.JComboBox();
		celestialBodyComboBox = new javax.swing.JComboBox();
		bodyLabel = new javax.swing.JLabel();
		celestialBodyLabel = new javax.swing.JLabel();

		jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12));
		jLabel1.setText("Event detector node:");

		okButton.setText("Ok");
		okButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				okButtonActionPerformed(evt);
			}
		});

		cancelButton.setText("Cancel");
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancelButtonActionPerformed(evt);
			}
		});

		applyButton.setText("Apply");
		applyButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				applyButtonActionPerformed(evt);
			}
		});

		addButton.setText("Add");
		addButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addButtonActionPerformed(evt);
			}
		});
		
		addButton.setVisible(false);

		jLabel3.setText("Y (Normal, out of plane):");

		jLabel4.setText("Z (Co-normal): ");

		jLabel2.setVisible(false);
		jLabel3.setVisible(false);
		jLabel4.setVisible(false);
		xTextField.setVisible(false);
		yTextField.setVisible(false);
		zTextField.setVisible(false);

		posLabel.setVisible(false);
		posXTextField.setVisible(false);
		posYTextField.setVisible(false);
		posZTextField.setVisible(false);
		pos2Label.setVisible(false);
		posX2TextField.setVisible(false);
		posY2TextField.setVisible(false);
		posZ2TextField.setVisible(false);

		yTextField.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				yTextFieldActionPerformed(evt);
			}
		});

		totalEclipseEventRadioButton.setSelected(true);
		totalEclipseEventRadioButton.setText("Total eclipse detection"); // NOI18N
		totalEclipseEventRadioButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						totalEclipseRadioButtonActionPerformed(evt);
					}
				});

		penumbraEclipseEventRadioButton.setText("Penumbra detection"); // NOI18N
		penumbraEclipseEventRadioButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						penumbraEclipseRadioButtonActionPerformed(evt);
					}
				});

		satBodyEventRadioButton.setSelected(true);
		satBodyEventRadioButton.setText("Satellite"); // NOI18N
		satBodyEventRadioButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						satObjectRadioButtonActionPerformed(evt);
					}
				});

		groundStationBodyEventRadioButton.setText("Ground station"); // NOI18N
		groundStationBodyEventRadioButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						groundStationBodyRadioButtonActionPerformed(evt);
					}
				});

		CelestialBodyEventRadioButton.setText("Celestial object"); // NOI18N
		CelestialBodyEventRadioButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						celestialBodyRadioButtonActionPerformed(evt);
					}
				});

		jLabel5.setText("Alignment detector");

		jLabelEvents.setText("Type of event:");

		jLabelEvent1.setText("Align angle");

		bodyLabel.setText("Body to align");

		jLabelEvent2.setVisible(false);

		eventTextField2.setVisible(false);

		jLabelEvent3.setVisible(false);

		eventTextField3.setVisible(false);

		totalEclipseEventRadioButton.setVisible(false);
		penumbraEclipseEventRadioButton.setVisible(false);

		// Construction de la liste des satellites definies par
		// l'utilisateur
		ArrayList<String> satList = getUserSatAndGroundstationList(true, false);
		bodyComboBox.setModel(new javax.swing.DefaultComboBoxModel(satList
				.toArray()));

		bodyComboBox.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {

				bodyActionPerformed();

			}
		});

		celestialBodyComboBox.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {

				celestialBodyActionPerformed();

			}
		});

		eventsComboBox.setModel(new javax.swing.DefaultComboBoxModel(Events
				.getValues()));

		eventsComboBox.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {

				eventActionPerformed();

			}
		});

		javax.swing.GroupLayout jPanelEventLayout = new javax.swing.GroupLayout(
				jPanelEvent);
		jPanelEvent.setLayout(jPanelEventLayout);
		jPanelEventLayout
				.setHorizontalGroup(jPanelEventLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanelEventLayout
										.createSequentialGroup()
										.addComponent(
												dateTextField,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												121, Short.MAX_VALUE)
										.addGroup(
												jPanelEventLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																jLabelEvent1)
														.addComponent(
																jLabelEvent2)
														.addComponent(
																jLabelEvent3)
														.addComponent(bodyLabel)
														.addComponent(
																celestialBodyLabel)
														.addComponent(jLabel2)
														.addComponent(posLabel)
														.addComponent(pos2Label)

										)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)

										.addGroup(

												jPanelEventLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)

														.addComponent(
																eventTextField1,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																121,
																Short.MAX_VALUE)
														.addComponent(
																eventTextField2,
																javax.swing.GroupLayout.Alignment.TRAILING,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																121,
																Short.MAX_VALUE)
														.addComponent(
																eventTextField3,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																121,
																Short.MAX_VALUE)
														.addComponent(
																bodyComboBox,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																121,
																Short.MAX_VALUE)
														.addComponent(
																celestialBodyComboBox,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																121,
																Short.MAX_VALUE)
														.addGroup(
																jPanelEventLayout
																		.createSequentialGroup()

																		.addComponent(
																				satBodyEventRadioButton)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				groundStationBodyEventRadioButton)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				CelestialBodyEventRadioButton))

														.addGroup(
																jPanelEventLayout
																		.createSequentialGroup()

																		.addComponent(
																				totalEclipseEventRadioButton)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				penumbraEclipseEventRadioButton))
														.addGroup(

																jPanelEventLayout
																		.createSequentialGroup()

																		.addComponent(
																				xTextField,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				121,
																				Short.MAX_VALUE)
																		.addComponent(
																				yTextField,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				121,
																				Short.MAX_VALUE)
																		.addComponent(
																				zTextField,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				121,
																				Short.MAX_VALUE))
														.addGroup(

																jPanelEventLayout
																		.createSequentialGroup()

																		.addComponent(
																				posXTextField,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				121,
																				Short.MAX_VALUE)
																		.addComponent(
																				posYTextField,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				121,
																				Short.MAX_VALUE)
																		.addComponent(
																				posZTextField,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				121,
																				Short.MAX_VALUE))
														.addGroup(

																jPanelEventLayout
																		.createSequentialGroup()

																		.addComponent(
																				posX2TextField,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				121,
																				Short.MAX_VALUE)
																		.addComponent(
																				posY2TextField,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				121,
																				Short.MAX_VALUE)
																		.addComponent(
																				posZ2TextField,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				121,
																				Short.MAX_VALUE)

														)

														.addGap(0, 0, 0))

						).addGap(146, 146, 146));
		jPanelEventLayout
				.setVerticalGroup(jPanelEventLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanelEventLayout
										.createSequentialGroup()

										.addComponent(
												dateTextField,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGroup(
												jPanelEventLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)

														.addComponent(
																totalEclipseEventRadioButton)
														.addComponent(
																penumbraEclipseEventRadioButton))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)

										.addGroup(
												jPanelEventLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)

														.addComponent(
																satBodyEventRadioButton)
														.addComponent(
																groundStationBodyEventRadioButton)
														.addComponent(
																CelestialBodyEventRadioButton))

										.addGroup(
												jPanelEventLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)

														.addComponent(bodyLabel)
														.addComponent(
																bodyComboBox,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))

										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanelEventLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																jLabelEvent1)
														.addComponent(
																eventTextField1,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)

										.addGroup(
												jPanelEventLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)

														.addComponent(
																celestialBodyComboBox)
														.addComponent(
																celestialBodyLabel,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanelEventLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																jLabelEvent2)
														.addComponent(
																eventTextField2,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)

										.addGroup(
												jPanelEventLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																jLabelEvent3)
														.addComponent(
																eventTextField3,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										
										.addGroup(
												jPanelEventLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(jLabel2)
														.addComponent(
																xTextField,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																yTextField,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																zTextField,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))

										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanelEventLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(posLabel)
														.addComponent(
																posXTextField,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																posYTextField,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																posZTextField,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))

										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanelEventLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(pos2Label)
														.addComponent(
																posX2TextField,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																posY2TextField,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																posZ2TextField,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE))

						));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup()
								.addContainerGap(110, Short.MAX_VALUE)
								.addComponent(okButton)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(cancelButton)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(applyButton))
				.addGroup(
						layout.createSequentialGroup().addContainerGap()
								.addComponent(jLabel1)
								.addContainerGap(47, Short.MAX_VALUE))
				.addGroup(
						layout.createSequentialGroup().addContainerGap()
								.addComponent(jLabel5)
								.addContainerGap(90, Short.MAX_VALUE))
				.addGroup(
						layout.createSequentialGroup().addContainerGap()
								.addComponent(jPanelEvent)
								.addContainerGap(90, Short.MAX_VALUE))
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(jLabelEvents))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(
														eventsComboBox,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(addButton).addGap(0, 0, 0)));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(jLabel1)
								.addGap(1, 1, 1)
								.addComponent(jLabel5)
								.addGap(18, 18, 18)

								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabelEvents)
												.addComponent(
														eventsComboBox,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(
														addButton,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED,
										26, 26)

								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jPanelEvent))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED,
										26, Short.MAX_VALUE)

								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(applyButton)
												.addComponent(cancelButton)
												.addComponent(okButton))));
	}// </editor-fold>//GEN-END:initComponents

	private void okButtonActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_okButtonActionPerformed
	{// GEN-HEADEREND:event_okButtonActionPerformed
		boolean success = saveSettings();

		// close internal frame
		if (success) {
			try {
				iframe.dispose(); // could setClosed(true)
			} catch (Exception e) {
			}
		}
	}// GEN-LAST:event_okButtonActionPerformed

	private void addButtonActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_okButtonActionPerformed
	{// GEN-HEADEREND:event_okButtonActionPerformed
		boolean success = saveSettings();

		// close internal frame
		if (success) {
			try {
				iframe.dispose(); // could setClosed(true)
			} catch (Exception e) {
			}
		}
	}// GEN-LAST:event_okButtonActionPerformed

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_cancelButtonActionPerformed
	{// GEN-HEADEREND:event_cancelButtonActionPerformed
		// close internal frame
		try {
			iframe.dispose(); // could setClosed(true)
		} catch (Exception e) {
		}
	}// GEN-LAST:event_cancelButtonActionPerformed

	private void applyButtonActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_applyButtonActionPerformed
	{// GEN-HEADEREND:event_applyButtonActionPerformed
		saveSettings();
	}// GEN-LAST:event_applyButtonActionPerformed

	private void yTextFieldActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_yTextFieldActionPerformed
	{// GEN-HEADEREND:event_yTextFieldActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_yTextFieldActionPerformed

	private void totalEclipseRadioButtonActionPerformed(
			java.awt.event.ActionEvent evt)// GEN-FIRST:event_eciRadioButtonActionPerformed
	{// GEN-HEADEREND:event_eciRadioButtonActionPerformed
		totalEclipseEventRadioButton.setSelected(true);
		penumbraEclipseEventRadioButton.setSelected(false);
	}// GEN-LAST:event_eciRadioButtonActionPerformed

	private void penumbraEclipseRadioButtonActionPerformed(
			java.awt.event.ActionEvent evt)// GEN-FIRST:event_ecefRadioButtonActionPerformed
	{// GEN-HEADEREND:event_ecefRadioButtonActionPerformed
		totalEclipseEventRadioButton.setSelected(false);
		penumbraEclipseEventRadioButton.setSelected(true);
	}// GEN-LAST:event_ecefRadioButtonActionPerformed

	private void satObjectRadioButtonActionPerformed(
			java.awt.event.ActionEvent evt)// GEN-FIRST:event_ecefRadioButtonActionPerformed
	{// GEN-HEADEREND:event_ecefRadioButtonActionPerformed

		// Construction de la liste des satellites definis par l'utilisateur
		ArrayList<String> satList = getUserSatAndGroundstationList(true, false);
		bodyComboBox.setModel(new javax.swing.DefaultComboBoxModel(satList
				.toArray()));

		satBodyEventRadioButton.setSelected(true);
		groundStationBodyEventRadioButton.setSelected(false);
		CelestialBodyEventRadioButton.setSelected(false);
	}// GEN-LAST:event_ecefRadioButtonActionPerformed

	private void groundStationBodyRadioButtonActionPerformed(
			java.awt.event.ActionEvent evt)// GEN-FIRST:event_ecefRadioButtonActionPerformed
	{// GEN-HEADEREND:event_ecefRadioButtonActionPerformed

		// Construction de la liste des stations sols definis par l'utilisateur
		ArrayList<String> groundStationList = getUserSatAndGroundstationList(
				false, true);
		bodyComboBox.setModel(new javax.swing.DefaultComboBoxModel(
				groundStationList.toArray()));

		satBodyEventRadioButton.setSelected(false);
		groundStationBodyEventRadioButton.setSelected(true);
		CelestialBodyEventRadioButton.setSelected(false);
	}// GEN-LAST:event_ecefRadioButtonActionPerformed

	private void celestialBodyRadioButtonActionPerformed(
			java.awt.event.ActionEvent evt)// GEN-FIRST:event_ecefRadioButtonActionPerformed
	{// GEN-HEADEREND:event_ecefRadioButtonActionPerformed

		// Recupere la liste des objets celestes
		bodyComboBox.setModel(new javax.swing.DefaultComboBoxModel(
				CelestialBodyObject.getValues()));

		satBodyEventRadioButton.setSelected(false);
		groundStationBodyEventRadioButton.setSelected(false);
		CelestialBodyEventRadioButton.setSelected(true);
	}// GEN-LAST:event_ecefRadioButtonActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton applyButton;
	private javax.swing.JButton cancelButton;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JButton okButton;
	private javax.swing.JTextField xTextField;
	private javax.swing.JTextField yTextField;
	private javax.swing.JTextField zTextField;

	private javax.swing.JLabel jLabelEvents;
	private javax.swing.JComboBox eventsComboBox;
	private javax.swing.JButton addButton;
	private javax.swing.JPanel jPanelEvent;
	private javax.swing.JLabel jLabelEvent1;
	private javax.swing.JLabel jLabelEvent2;
	private javax.swing.JLabel jLabelEvent3;
	private javax.swing.JTextField eventTextField1;
	private javax.swing.JTextField eventTextField2;
	private javax.swing.JTextField eventTextField3;
	private javax.swing.JRadioButton totalEclipseEventRadioButton;
	private javax.swing.JRadioButton penumbraEclipseEventRadioButton;
	private javax.swing.JComboBox bodyComboBox;
	private javax.swing.JComboBox celestialBodyComboBox;
	private javax.swing.JLabel bodyLabel;
	private javax.swing.JLabel celestialBodyLabel;
	private javax.swing.JRadioButton satBodyEventRadioButton;
	private javax.swing.JRadioButton groundStationBodyEventRadioButton;
	private javax.swing.JRadioButton CelestialBodyEventRadioButton;

	private javax.swing.JLabel posLabel;
	private javax.swing.JTextField posXTextField;
	private javax.swing.JTextField posYTextField;
	private javax.swing.JTextField posZTextField;

	private javax.swing.JLabel pos2Label;
	private javax.swing.JTextField posX2TextField;
	private javax.swing.JTextField posY2TextField;
	private javax.swing.JTextField posZ2TextField;

	private javax.swing.JTextField dateTextField;

	// End of variables declaration//GEN-END:variables

	private void eventActionPerformed() {

		eventTextField1.setText(0.0 + "");
		eventTextField2.setText(0.0 + "");
		eventTextField3.setText(0.0 + "");

		xTextField.setText(0.0 + "");
		yTextField.setText(0.0 + "");
		zTextField.setText(0.0 + "");

		posXTextField.setText(0.0 + "");
		posYTextField.setText(0.0 + "");
		posZTextField.setText(0.0 + "");

		posX2TextField.setText(0.0 + "");
		posY2TextField.setText(0.0 + "");
		posZ2TextField.setText(0.0 + "");

		// Reset to false
		jLabelEvent1.setVisible(false);
		eventTextField1.setVisible(false);
		jLabelEvent2.setVisible(false);
		eventTextField2.setVisible(false);
		jLabelEvent3.setVisible(false);
		eventTextField3.setVisible(false);
		bodyComboBox.setVisible(false);
		celestialBodyComboBox.setVisible(false);
		bodyLabel.setVisible(false);
		celestialBodyLabel.setVisible(false);
		totalEclipseEventRadioButton.setVisible(false);
		penumbraEclipseEventRadioButton.setVisible(false);
		satBodyEventRadioButton.setVisible(false);
		groundStationBodyEventRadioButton.setVisible(false);
		CelestialBodyEventRadioButton.setVisible(false);
		jLabel2.setVisible(false);
		xTextField.setVisible(false);
		yTextField.setVisible(false);
		zTextField.setVisible(false);
		posLabel.setVisible(false);
		posXTextField.setVisible(false);
		posYTextField.setVisible(false);
		posZTextField.setVisible(false);
		pos2Label.setVisible(false);
		posX2TextField.setVisible(false);
		posY2TextField.setVisible(false);
		posZ2TextField.setVisible(false);
		dateTextField.setVisible(false);

		ArrayList<String> satAndGroundstationList = null;

		switch (Events.getEnum(eventsComboBox.getSelectedItem().toString())) {

		// Alignment detector
		case ALIGNMENT:

			jLabel5.setText("Alignment detector");
			// First parameter
			jLabelEvent1.setText("Align angle [deg] :");
			jLabelEvent1.setVisible(true);
			eventTextField1.setVisible(true);

			// Load satellites into comboBox
			satObjectRadioButtonActionPerformed(null);

			bodyLabel.setText("Body to align :");
			bodyComboBox.setVisible(true);
			bodyLabel.setVisible(true);

			// Radio boutons for choosing type of object
			satBodyEventRadioButton.setVisible(true);
			groundStationBodyEventRadioButton.setVisible(true);
			CelestialBodyEventRadioButton.setVisible(true);

			break;

		// Altitude detector
		case ALTITUDE:
			jLabel5.setText("Altitude detector");
			// First parameter
			jLabelEvent1.setText("Altitude Value [m] :");
			jLabelEvent1.setVisible(true);
			eventTextField1.setVisible(true);

			break;

		// Apparent Elevation detector
		case APPARENTELEVATION:
			jLabel5.setText("Apparent Elevation detector");
			// First parameter
			jLabelEvent1.setText("Elevation Value [deg] :");
			jLabelEvent1.setVisible(true);
			eventTextField1.setVisible(true);

			// Construction de la liste des satellites et stations sols definies
			// par l'utilisateur
			satAndGroundstationList = getUserSatAndGroundstationList(false,
					true);
			bodyComboBox.setModel(new javax.swing.DefaultComboBoxModel(
					satAndGroundstationList.toArray()));

			bodyLabel.setText("Groundstation :");
			bodyComboBox.setVisible(true);
			bodyLabel.setVisible(true);

			break;

		// Apside detector
		case APSIDE:
			jLabel5.setText("Apside detector");
			break;

		// Circular field of view detector
		case CIRCULARFIELDOFVIEW:
			jLabel5.setText("Circular field of view detector");
			// First parameter
			jLabelEvent1.setText("Max Interval [sec] :");
			jLabelEvent1.setVisible(true);
			eventTextField1.setVisible(true);

			// Second parameter
			jLabelEvent2.setText("Half Aperture [deg] :");
			jLabelEvent2.setVisible(true);
			eventTextField2.setVisible(true);

			// third parameter
			jLabel2.setText("Center of the fov [m] :");
			jLabel2.setVisible(true);
			xTextField.setVisible(true);
			yTextField.setVisible(true);
			zTextField.setVisible(true);

			// Load satellites into comboBox
			satObjectRadioButtonActionPerformed(null);
			// Radio button for choosing wich type of target
			satBodyEventRadioButton.setVisible(true);
			groundStationBodyEventRadioButton.setVisible(true);
			CelestialBodyEventRadioButton.setVisible(true);

			bodyLabel.setText("Considered target :");
			bodyComboBox.setVisible(true);
			bodyLabel.setVisible(true);

			break;

		// Date Detector
		case DATE:
			jLabel5.setText("Date Detector");

			dateTextField.setText(mNode.getDateformatShort().format(
					mNode.getCurrentTimeDate().getTime()));

			dateTextField.setVisible(true);

			break;

		// Dihedral field of view detector
		case DIHEDRALFIELDOFVIEW:
			jLabel5.setText("Dihedral field of view detector");
			// First parameter
			jLabelEvent1.setText("Max interval [sec] :");
			jLabelEvent1.setVisible(true);
			eventTextField1.setVisible(true);

			// Second parameter
			jLabelEvent2.setText("Half aperture 1 [deg] :");
			jLabelEvent2.setVisible(true);
			eventTextField2.setVisible(true);

			// third parameter
			jLabelEvent3.setText("Half aperture 2 [deg] :");
			jLabelEvent3.setVisible(true);
			eventTextField3.setVisible(true);

			// Fourth parameter
			jLabel2.setText("Center of the fov [m] :");
			jLabel2.setVisible(true);
			xTextField.setVisible(true);
			yTextField.setVisible(true);
			zTextField.setVisible(true);

			// Fifth parameter
			posLabel.setText("Fov dihedral axis 1 [m] :");
			posLabel.setVisible(true);
			posXTextField.setVisible(true);
			posYTextField.setVisible(true);
			posZTextField.setVisible(true);

			// sixth parameter
			pos2Label.setText("Fov dihedral axis 2 [m] :");
			pos2Label.setVisible(true);
			posX2TextField.setVisible(true);
			posY2TextField.setVisible(true);
			posZ2TextField.setVisible(true);

			// Load satellites into comboBox
			satObjectRadioButtonActionPerformed(null);
			// Radio button for choosing wich type of target
			satBodyEventRadioButton.setVisible(true);
			groundStationBodyEventRadioButton.setVisible(true);
			CelestialBodyEventRadioButton.setVisible(true);

			bodyLabel.setText("Considered target :");
			bodyComboBox.setVisible(true);
			bodyLabel.setVisible(true);

			break;

		// Eclipse detector
		case ECLIPSE:
			jLabel5.setText("Eclipse detector");
			// First parameter
			jLabelEvent1.setText("Occulted Radius [m] :");
			jLabelEvent1.setVisible(true);
			eventTextField1.setText(Constants.SUN_RADIUS + "");
			eventTextField1.setVisible(true);

			// second parameter
			jLabelEvent2.setText("Occulting Radius [m] :");
			jLabelEvent2.setVisible(true);
			eventTextField2.setText(Constants.SUN_RADIUS + "");
			eventTextField2.setVisible(true);

			// First body combo box
			celestialBodyRadioButtonActionPerformed(null);
			bodyLabel.setText("Occulted body :");
			bodyComboBox.setVisible(true);
			bodyLabel.setVisible(true);

			// Second body combo box
			celestialBodyLabel.setText("Occulting body :");
			celestialBodyLabel.setVisible(true);
			celestialBodyComboBox.setVisible(true);
			celestialBodyComboBox
					.setModel(new javax.swing.DefaultComboBoxModel(
							CelestialBodyObject.getValues()));
			celestialBodyComboBox
					.setSelectedItem(CelestialBodyObject.EARTH.value);

			// Radio bouton for the type of eclipse
			totalEclipseEventRadioButton.setVisible(true);
			penumbraEclipseEventRadioButton.setVisible(true);

			break;

		// Elevation detector
		case ELEVATION:
			jLabel5.setText("Elevation detector");
			// First parameter
			jLabelEvent1.setText("Elevation [deg] :");
			jLabelEvent1.setVisible(true);
			eventTextField1.setVisible(true);

			// Construction de la liste des satellites et stations sols definies
			// par l'utilisateur
			satAndGroundstationList = getUserSatAndGroundstationList(false,
					true);
			bodyComboBox.setModel(new javax.swing.DefaultComboBoxModel(
					satAndGroundstationList.toArray()));

			bodyLabel.setText("Groundstation :");
			bodyComboBox.setVisible(true);
			bodyLabel.setVisible(true);

			break;

		// Ground mask elevation detector
		case GROUNDMASKELEVATION:
			jLabel5.setText("Ground mask elevation detector");
			break;

		// Node detector
		case NODE:
			jLabel5.setText("Node detector");
			break;

		}

	}

	private void bodyActionPerformed() {

		if (Events.getEnum(eventsComboBox.getSelectedItem().toString()).equals(
				Events.ECLIPSE)) {

			switch (CelestialBodyObject.getEnum(bodyComboBox.getSelectedItem()
					.toString())) {
			// Set the default radius of planets
			case SUN:
				eventTextField1.setText(Double.toString(CelestialBodyObject.SUN.equatorialRadius));
				break;
			case EARTH:
				eventTextField1.setText(Double.toString(CelestialBodyObject.EARTH.equatorialRadius));
				break;
			case MERCURY:
				eventTextField1.setText(Double.toString(CelestialBodyObject.MERCURY.equatorialRadius));
				break;
			case VENUS:
				eventTextField1.setText(Double.toString(CelestialBodyObject.VENUS.equatorialRadius));
				break;
			case MOON:
				eventTextField1.setText(Double.toString(CelestialBodyObject.MOON.equatorialRadius));
				break;
			case MARS:
				eventTextField1.setText(Double.toString(CelestialBodyObject.MARS.equatorialRadius));
				break;
			case JUPITER:
				eventTextField1.setText(Double.toString(CelestialBodyObject.JUPITER.equatorialRadius));
				break;
			case SATURN:
				eventTextField1.setText(Double.toString(CelestialBodyObject.SATURN.equatorialRadius));
				break;
			case URANUS:
				eventTextField1.setText(Double.toString(CelestialBodyObject.URANUS.equatorialRadius));
				break;
			case NEPTUNE:
				eventTextField1.setText(Double.toString(CelestialBodyObject.NEPTUNE.equatorialRadius));
				break;
			case PLUTON:
				eventTextField1.setText(Double.toString(CelestialBodyObject.PLUTON.equatorialRadius));
				break;
			default:
				eventTextField1.setText(0 + "");
			}
		}
	}

	private void celestialBodyActionPerformed() {

		if (Events.getEnum(eventsComboBox.getSelectedItem().toString()).equals(
				Events.ECLIPSE)) {

			switch (CelestialBodyObject.getEnum(celestialBodyComboBox
					.getSelectedItem().toString())) {
			// Set the default radius of planets
			case SUN:
				eventTextField2.setText(Double.toString(CelestialBodyObject.SUN.equatorialRadius));
				break;
			case EARTH:
				eventTextField2.setText(Double.toString(CelestialBodyObject.EARTH.equatorialRadius));
				break;
			case MERCURY:
				eventTextField2.setText(Double.toString(CelestialBodyObject.MERCURY.equatorialRadius));
				break;
			case VENUS:
				eventTextField2.setText(Double.toString(CelestialBodyObject.VENUS.equatorialRadius));
				break;
			case MOON:
				eventTextField2.setText(Double.toString(CelestialBodyObject.MOON.equatorialRadius));
				break;
			case MARS:
				eventTextField2.setText(Double.toString(CelestialBodyObject.MARS.equatorialRadius));
				break;
			case JUPITER:
				eventTextField2.setText(Double.toString(CelestialBodyObject.JUPITER.equatorialRadius));
				break;
			case SATURN:
				eventTextField2.setText(Double.toString(CelestialBodyObject.SATURN.equatorialRadius));
				break;
			case URANUS:
				eventTextField2.setText(Double.toString(CelestialBodyObject.URANUS.equatorialRadius));
				break;
			case NEPTUNE:
				eventTextField2.setText(Double.toString(CelestialBodyObject.NEPTUNE.equatorialRadius));
				break;
			case PLUTON:
				eventTextField2.setText(Double.toString(CelestialBodyObject.PLUTON.equatorialRadius));
				break;
			default:
				eventTextField2.setText(0 + "");
			}
		}
	}

	private ArrayList<String> getUserSatAndGroundstationList(boolean sat,
			boolean groundstation) {

		// Construction de la liste des satellites et stations sols definies
		// par l'utilisateur
		ArrayList<String> satAndGroundstationList = new ArrayList<String>();

		if (sat) {
			for (Enumeration<String> e = mNode.getUserSatList().keys(); e
					.hasMoreElements();) {
				String satName = e.nextElement();
				// non prise en compte du sat courant
//				if (!satName.equals(mNode.getCurrentSat().getName()))
					satAndGroundstationList.add(satName);

			}
		}

		if (groundstation) {

			for (Enumeration<String> e = mNode.getUserGroundStationsList()
					.keys(); e.hasMoreElements();) {
				satAndGroundstationList.add(e.nextElement());

			}

		}
		return satAndGroundstationList;

	}

	private boolean saveSettings() {
		// save settings back to Node
		boolean saveSuccess = true;

		try {

			mNode.setEventsParams(new double[] {
					Double.parseDouble(eventTextField1.getText()),
					Double.parseDouble(eventTextField2.getText()),
					Double.parseDouble(eventTextField3.getText()) });

			switch (Events.getEnum(eventsComboBox.getSelectedItem().toString())) {

			// Alignment detector
			case ALIGNMENT:

				// Sat, ground station or celestial body
				mNode.setTargetBodyObjectName(bodyComboBox.getSelectedItem()
						.toString());
				mNode.setEvent(Events.ALIGNMENT);

				if (satBodyEventRadioButton.isSelected()) {
					mNode.setTypeOfTarget(EventNode.SATELLITEOBJECT);
				}

				else if (groundStationBodyEventRadioButton.isSelected()) {

					mNode.setTypeOfTarget(EventNode.GROUNDSTATIONOBJECT);
				}

				else {

					mNode.setTypeOfTarget(EventNode.CELESTIALBODYOBJECT);
				}

				break;

			// Altitude detector
			case ALTITUDE:

				mNode.setEvent(Events.ALTITUDE);

				break;

			// Apparent Elevation detector
			case APPARENTELEVATION:
				mNode.setTargetBodyObjectName(bodyComboBox.getSelectedItem()
						.toString());
				mNode.setTypeOfTarget(EventNode.GROUNDSTATIONOBJECT);

				mNode.setEvent(Events.APPARENTELEVATION);

				break;

			// Apside detector
			case APSIDE:

				mNode.setEvent(Events.APSIDE);

				break;

			// Circular field of view detector
			case CIRCULARFIELDOFVIEW:

				mNode.setTargetBodyObjectName(bodyComboBox.getSelectedItem()
						.toString());

				if (satBodyEventRadioButton.isSelected()) {
					mNode.setTypeOfTarget(EventNode.SATELLITEOBJECT);
				}

				else if (groundStationBodyEventRadioButton.isSelected()) {

					mNode.setTypeOfTarget(EventNode.GROUNDSTATIONOBJECT);
				}

				else {

					mNode.setTypeOfTarget(EventNode.CELESTIALBODYOBJECT);
				}

				mNode.setEventsParams(new double[] {
						Double.parseDouble(eventTextField1.getText()),
						Double.parseDouble(eventTextField2.getText()), 0 });
				mNode.setPositionVector(new Vector3D(Double
						.parseDouble(xTextField.getText()), Double
						.parseDouble(yTextField.getText()), Double
						.parseDouble(zTextField.getText())));

				mNode.setEvent(Events.CIRCULARFIELDOFVIEW);

				break;

			// Date Detector
			case DATE:

				mNode.getCurrentTimeDate().setTime(
						mNode.getDateformatShort().parse(
								dateTextField.getText()));

				mNode.setEvent(Events.DATE);

				break;

			// Dihedral field of view detector
			case DIHEDRALFIELDOFVIEW:

				mNode.setTargetBodyObjectName(bodyComboBox.getSelectedItem()
						.toString());

				if (satBodyEventRadioButton.isSelected()) {
					mNode.setTypeOfTarget(EventNode.SATELLITEOBJECT);
				}

				else if (groundStationBodyEventRadioButton.isSelected()) {

					mNode.setTypeOfTarget(EventNode.GROUNDSTATIONOBJECT);
				}

				else {

					mNode.setTypeOfTarget(EventNode.CELESTIALBODYOBJECT);
				}

				mNode.setEventsParams(new double[] {
						Double.parseDouble(eventTextField1.getText()),
						Double.parseDouble(eventTextField2.getText()),
						Double.parseDouble(eventTextField3.getText()) });

				// Direction of the fov center
				mNode.setPositionVector(new Vector3D(Double
						.parseDouble(xTextField.getText()), Double
						.parseDouble(yTextField.getText()), Double
						.parseDouble(zTextField.getText())));

				// Fov dihedral axis 1
				mNode.setPositionVector2(new Vector3D(Double
						.parseDouble(posXTextField.getText()), Double
						.parseDouble(posYTextField.getText()), Double
						.parseDouble(posZTextField.getText())));

				// Fov dihedral axis 2

				mNode.setPositionVector3(new Vector3D(Double
						.parseDouble(posX2TextField.getText()), Double
						.parseDouble(posY2TextField.getText()), Double
						.parseDouble(posZ2TextField.getText())));

				mNode.setEvent(Events.DIHEDRALFIELDOFVIEW);

				break;

			// Eclipse detector
			case ECLIPSE:

				mNode.setTargetBodyObjectName(bodyComboBox.getSelectedItem()
						.toString());

				mNode.setTargetCelestialBodyObjectName(celestialBodyComboBox
						.getSelectedItem().toString());

				mNode.setTypeOfTarget(EventNode.CELESTIALBODYOBJECT);

				mNode.setTotalEclipse(totalEclipseEventRadioButton.isSelected());

				mNode.setEvent(Events.ECLIPSE);

				break;

			// Elevation detector
			case ELEVATION:

				mNode.setTargetBodyObjectName(bodyComboBox.getSelectedItem()
						.toString());
				mNode.setTypeOfTarget(EventNode.GROUNDSTATIONOBJECT);

				mNode.setEvent(Events.ELEVATION);

				break;

			// Ground mask elevation detector
			case GROUNDMASKELEVATION:

				mNode.setEvent(Events.GROUNDMASKELEVATION);

				break;

			// Node detector
			case NODE:
				mNode.setEvent(Events.NODE);

				break;

			}

		} catch (Exception e) {
			JOptionPane.showMessageDialog(this,
					"Date format error, check input.", "Data ERROR",
					JOptionPane.ERROR_MESSAGE);
			saveSuccess = false;
		}

		return saveSuccess;

	}

	public JInternalFrame getIframe() {
		return iframe;
	}

	public void setIframe(JInternalFrame iframe) {
		this.iframe = iframe;
	}

	public enum Events {
		ALIGNMENT("Alignment"), ALTITUDE("Altitude"), APPARENTELEVATION(
				"Apparent Elevation"), APSIDE("Apside"), CIRCULARFIELDOFVIEW(
				"Circular field of view"), DATE("Date"), DIHEDRALFIELDOFVIEW(
				"Diheral field of view"), ECLIPSE("Eclipse"), ELEVATION(
				"Elevation"), GROUNDMASKELEVATION("Ground mask elevation"), NODE(
				"Node");

		private String value;

		private Events(String event) {
			this.value = event;
		}

		public String getEvent() {
			return value;
		}

		public static Object[] getValues() {

			ArrayList<String> eventList = new ArrayList<String>();

			for (Events e : Events.values()) {
				eventList.add(e.value);
			}

			return eventList.toArray();
		}

		public static Events getEnum(String value) {
			for (Events event : values()) {
				if (event.value.equals(value))
					return event;
			}
			return null;
		}

	}

	public enum CelestialBodyObject {

		SUN("Sun",Constants.SUN_RADIUS), MERCURY("Mercury",2439700), VENUS("Venus",6051800),

		EARTH("Earth",Constants.WGS84_EARTH_EQUATORIAL_RADIUS), MOON("Moon",1737400), MARS("Mars",3396200), 
		JUPITER("Jupiter",71492000), SATURN(
				"Saturn",60268000),

		URANUS("Uranus",25559000), NEPTUNE("Neptune",24764000), PLUTON("Pluton",1153000);

		private String value;
		
		private double equatorialRadius;

		private CelestialBodyObject(String value,double equatorialRadius) {
			this.value = value;
			this.equatorialRadius = equatorialRadius;

		}

		public static Object[] getValues() {

			ArrayList<String> bodyList = new ArrayList<String>();

			for (CelestialBodyObject e : CelestialBodyObject.values()) {
				bodyList.add(e.value);
			}

			return bodyList.toArray();
		}

		public static CelestialBodyObject getEnum(String value) {
			for (CelestialBodyObject celestialBody : values()) {
				if (celestialBody.value.equals(value))
					return celestialBody;
			}
			return null;
		}

		public String getBody() {
			return value;
		}

		public double getEquatorialRadius() {
			return equatorialRadius;
		}
	}

}
